"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/xrpl-service.ts":
/*!*********************************!*\
  !*** ./src/lib/xrpl-service.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   xrplService: function() { return /* binding */ xrplService; }\n/* harmony export */ });\n/* harmony import */ var xrpl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! xrpl */ \"(app-pages-browser)/./node_modules/xrpl/dist/npm/index.js\");\n/* harmony import */ var xrpl__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(xrpl__WEBPACK_IMPORTED_MODULE_0__);\n\nclass XRPLService {\n    async connect() {\n        if (!this.isConnected) {\n            await this.client.connect();\n            this.isConnected = true;\n        }\n    }\n    async disconnect() {\n        if (this.isConnected) {\n            await this.client.disconnect();\n            this.isConnected = false;\n        }\n    }\n    async getAccountInfo(address) {\n        await this.connect();\n        const request = {\n            command: \"account_info\",\n            account: address,\n            ledger_index: \"validated\"\n        };\n        return await this.client.request(request);\n    }\n    async getAccountTransactions(address) {\n        let limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 20;\n        await this.connect();\n        const request = {\n            command: \"account_tx\",\n            account: address,\n            limit,\n            ledger_index_min: -1,\n            ledger_index_max: -1\n        };\n        return await this.client.request(request);\n    }\n    async getTokenBalance(address, currency, issuer) {\n        try {\n            const accountInfo = await this.getAccountInfo(address);\n            // For token balances, we need to check trust lines\n            const accountData = accountInfo.result.account_data;\n            const lines = accountData.Lines || [];\n            const tokenLine = lines.find((line)=>line.currency === currency && line.account === issuer);\n            return tokenLine ? parseFloat(tokenLine.balance) : 0;\n        } catch (error) {\n            console.error(\"Error fetching token balance:\", error);\n            return 0;\n        }\n    }\n    async getXRPBalance(address) {\n        try {\n            const accountInfo = await this.getAccountInfo(address);\n            return parseFloat(accountInfo.result.account_data.Balance) / 1000000 // Convert drops to XRP\n            ;\n        } catch (error) {\n            console.error(\"Error fetching XRP balance:\", error);\n            return 0;\n        }\n    }\n    // Subscribe to real-time transaction stream\n    subscribeToTransactions(addresses, callback) {\n        this.connect().then(()=>{\n            this.client.request({\n                command: \"subscribe\",\n                accounts: addresses\n            });\n            this.client.on(\"transaction\", callback);\n        });\n    }\n    unsubscribeFromTransactions() {\n        this.client.removeAllListeners(\"transaction\");\n    }\n    constructor(){\n        this.isConnected = false;\n        this.client = new xrpl__WEBPACK_IMPORTED_MODULE_0__.Client(\"wss://s.altnet.rippletest.net:51233\" || 0);\n    }\n}\nconst xrplService = new XRPLService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIveHJwbC1zZXJ2aWNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFtRTtBQUVuRSxNQUFNQztJQVFKLE1BQU1DLFVBQVU7UUFDZCxJQUFJLENBQUMsSUFBSSxDQUFDQyxXQUFXLEVBQUU7WUFDckIsTUFBTSxJQUFJLENBQUNDLE1BQU0sQ0FBQ0YsT0FBTztZQUN6QixJQUFJLENBQUNDLFdBQVcsR0FBRztRQUNyQjtJQUNGO0lBRUEsTUFBTUUsYUFBYTtRQUNqQixJQUFJLElBQUksQ0FBQ0YsV0FBVyxFQUFFO1lBQ3BCLE1BQU0sSUFBSSxDQUFDQyxNQUFNLENBQUNDLFVBQVU7WUFDNUIsSUFBSSxDQUFDRixXQUFXLEdBQUc7UUFDckI7SUFDRjtJQUVBLE1BQU1HLGVBQWVDLE9BQWUsRUFBRTtRQUNwQyxNQUFNLElBQUksQ0FBQ0wsT0FBTztRQUNsQixNQUFNTSxVQUE4QjtZQUNsQ0MsU0FBUztZQUNUQyxTQUFTSDtZQUNUSSxjQUFjO1FBQ2hCO1FBQ0EsT0FBTyxNQUFNLElBQUksQ0FBQ1AsTUFBTSxDQUFDSSxPQUFPLENBQUNBO0lBQ25DO0lBRUEsTUFBTUksdUJBQXVCTCxPQUFlLEVBQWM7WUFBWk0sUUFBQUEsaUVBQVE7UUFDcEQsTUFBTSxJQUFJLENBQUNYLE9BQU87UUFDbEIsTUFBTU0sVUFBNEI7WUFDaENDLFNBQVM7WUFDVEMsU0FBU0g7WUFDVE07WUFDQUMsa0JBQWtCLENBQUM7WUFDbkJDLGtCQUFrQixDQUFDO1FBQ3JCO1FBQ0EsT0FBTyxNQUFNLElBQUksQ0FBQ1gsTUFBTSxDQUFDSSxPQUFPLENBQUNBO0lBQ25DO0lBRUEsTUFBTVEsZ0JBQWdCVCxPQUFlLEVBQUVVLFFBQWdCLEVBQUVDLE1BQWMsRUFBRTtRQUN2RSxJQUFJO1lBQ0YsTUFBTUMsY0FBYyxNQUFNLElBQUksQ0FBQ2IsY0FBYyxDQUFDQztZQUM5QyxtREFBbUQ7WUFDbkQsTUFBTWEsY0FBY0QsWUFBWUUsTUFBTSxDQUFDQyxZQUFZO1lBQ25ELE1BQU1DLFFBQVFILFlBQVlJLEtBQUssSUFBSSxFQUFFO1lBRXJDLE1BQU1DLFlBQVlGLE1BQU1HLElBQUksQ0FBQyxDQUFDQyxPQUM1QkEsS0FBS1YsUUFBUSxLQUFLQSxZQUFZVSxLQUFLakIsT0FBTyxLQUFLUTtZQUdqRCxPQUFPTyxZQUFZRyxXQUFXSCxVQUFVSSxPQUFPLElBQUk7UUFDckQsRUFBRSxPQUFPQyxPQUFPO1lBQ2RDLFFBQVFELEtBQUssQ0FBQyxpQ0FBaUNBO1lBQy9DLE9BQU87UUFDVDtJQUNGO0lBRUEsTUFBTUUsY0FBY3pCLE9BQWUsRUFBRTtRQUNuQyxJQUFJO1lBQ0YsTUFBTVksY0FBYyxNQUFNLElBQUksQ0FBQ2IsY0FBYyxDQUFDQztZQUM5QyxPQUFPcUIsV0FBV1QsWUFBWUUsTUFBTSxDQUFDQyxZQUFZLENBQUNXLE9BQU8sSUFBSSxRQUFRLHVCQUF1Qjs7UUFDOUYsRUFBRSxPQUFPSCxPQUFPO1lBQ2RDLFFBQVFELEtBQUssQ0FBQywrQkFBK0JBO1lBQzdDLE9BQU87UUFDVDtJQUNGO0lBRUEsNENBQTRDO0lBQzVDSSx3QkFBd0JDLFNBQW1CLEVBQUVDLFFBQW9DLEVBQUU7UUFDakYsSUFBSSxDQUFDbEMsT0FBTyxHQUFHbUMsSUFBSSxDQUFDO1lBQ2xCLElBQUksQ0FBQ2pDLE1BQU0sQ0FBQ0ksT0FBTyxDQUFDO2dCQUNsQkMsU0FBUztnQkFDVDZCLFVBQVVIO1lBQ1o7WUFFQSxJQUFJLENBQUMvQixNQUFNLENBQUNtQyxFQUFFLENBQUMsZUFBZUg7UUFDaEM7SUFDRjtJQUVBSSw4QkFBOEI7UUFDNUIsSUFBSSxDQUFDcEMsTUFBTSxDQUFDcUMsa0JBQWtCLENBQUM7SUFDakM7SUFsRkFDLGFBQWM7YUFGTnZDLGNBQWM7UUFHcEIsSUFBSSxDQUFDQyxNQUFNLEdBQUcsSUFBSUosd0NBQU1BLENBQUMyQyxxQ0FBb0MsSUFBSTtJQUNuRTtBQWlGRjtBQUVPLE1BQU1HLGNBQWMsSUFBSTdDLGNBQWEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2xpYi94cnBsLXNlcnZpY2UudHM/MWE2ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDbGllbnQsIEFjY291bnRJbmZvUmVxdWVzdCwgQWNjb3VudFR4UmVxdWVzdCB9IGZyb20gJ3hycGwnXG5cbmNsYXNzIFhSUExTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBjbGllbnQ6IENsaWVudFxuICBwcml2YXRlIGlzQ29ubmVjdGVkID0gZmFsc2VcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNsaWVudCA9IG5ldyBDbGllbnQocHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfWFJQTF9ORVRXT1JLIHx8ICd3c3M6Ly9zLmFsdG5ldC5yaXBwbGV0ZXN0Lm5ldDo1MTIzMycpXG4gIH1cblxuICBhc3luYyBjb25uZWN0KCkge1xuICAgIGlmICghdGhpcy5pc0Nvbm5lY3RlZCkge1xuICAgICAgYXdhaXQgdGhpcy5jbGllbnQuY29ubmVjdCgpXG4gICAgICB0aGlzLmlzQ29ubmVjdGVkID0gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGRpc2Nvbm5lY3QoKSB7XG4gICAgaWYgKHRoaXMuaXNDb25uZWN0ZWQpIHtcbiAgICAgIGF3YWl0IHRoaXMuY2xpZW50LmRpc2Nvbm5lY3QoKVxuICAgICAgdGhpcy5pc0Nvbm5lY3RlZCA9IGZhbHNlXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0QWNjb3VudEluZm8oYWRkcmVzczogc3RyaW5nKSB7XG4gICAgYXdhaXQgdGhpcy5jb25uZWN0KClcbiAgICBjb25zdCByZXF1ZXN0OiBBY2NvdW50SW5mb1JlcXVlc3QgPSB7XG4gICAgICBjb21tYW5kOiAnYWNjb3VudF9pbmZvJyxcbiAgICAgIGFjY291bnQ6IGFkZHJlc3MsXG4gICAgICBsZWRnZXJfaW5kZXg6ICd2YWxpZGF0ZWQnXG4gICAgfVxuICAgIHJldHVybiBhd2FpdCB0aGlzLmNsaWVudC5yZXF1ZXN0KHJlcXVlc3QpXG4gIH1cblxuICBhc3luYyBnZXRBY2NvdW50VHJhbnNhY3Rpb25zKGFkZHJlc3M6IHN0cmluZywgbGltaXQgPSAyMCkge1xuICAgIGF3YWl0IHRoaXMuY29ubmVjdCgpXG4gICAgY29uc3QgcmVxdWVzdDogQWNjb3VudFR4UmVxdWVzdCA9IHtcbiAgICAgIGNvbW1hbmQ6ICdhY2NvdW50X3R4JyxcbiAgICAgIGFjY291bnQ6IGFkZHJlc3MsXG4gICAgICBsaW1pdCxcbiAgICAgIGxlZGdlcl9pbmRleF9taW46IC0xLFxuICAgICAgbGVkZ2VyX2luZGV4X21heDogLTFcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuY2xpZW50LnJlcXVlc3QocmVxdWVzdClcbiAgfVxuXG4gIGFzeW5jIGdldFRva2VuQmFsYW5jZShhZGRyZXNzOiBzdHJpbmcsIGN1cnJlbmN5OiBzdHJpbmcsIGlzc3Vlcjogc3RyaW5nKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGFjY291bnRJbmZvID0gYXdhaXQgdGhpcy5nZXRBY2NvdW50SW5mbyhhZGRyZXNzKVxuICAgICAgLy8gRm9yIHRva2VuIGJhbGFuY2VzLCB3ZSBuZWVkIHRvIGNoZWNrIHRydXN0IGxpbmVzXG4gICAgICBjb25zdCBhY2NvdW50RGF0YSA9IGFjY291bnRJbmZvLnJlc3VsdC5hY2NvdW50X2RhdGEgYXMgYW55XG4gICAgICBjb25zdCBsaW5lcyA9IGFjY291bnREYXRhLkxpbmVzIHx8IFtdXG4gICAgICBcbiAgICAgIGNvbnN0IHRva2VuTGluZSA9IGxpbmVzLmZpbmQoKGxpbmU6IGFueSkgPT4gXG4gICAgICAgIGxpbmUuY3VycmVuY3kgPT09IGN1cnJlbmN5ICYmIGxpbmUuYWNjb3VudCA9PT0gaXNzdWVyXG4gICAgICApXG4gICAgICBcbiAgICAgIHJldHVybiB0b2tlbkxpbmUgPyBwYXJzZUZsb2F0KHRva2VuTGluZS5iYWxhbmNlKSA6IDBcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgdG9rZW4gYmFsYW5jZTonLCBlcnJvcilcbiAgICAgIHJldHVybiAwXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0WFJQQmFsYW5jZShhZGRyZXNzOiBzdHJpbmcpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgYWNjb3VudEluZm8gPSBhd2FpdCB0aGlzLmdldEFjY291bnRJbmZvKGFkZHJlc3MpXG4gICAgICByZXR1cm4gcGFyc2VGbG9hdChhY2NvdW50SW5mby5yZXN1bHQuYWNjb3VudF9kYXRhLkJhbGFuY2UpIC8gMTAwMDAwMCAvLyBDb252ZXJ0IGRyb3BzIHRvIFhSUFxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBYUlAgYmFsYW5jZTonLCBlcnJvcilcbiAgICAgIHJldHVybiAwXG4gICAgfVxuICB9XG5cbiAgLy8gU3Vic2NyaWJlIHRvIHJlYWwtdGltZSB0cmFuc2FjdGlvbiBzdHJlYW1cbiAgc3Vic2NyaWJlVG9UcmFuc2FjdGlvbnMoYWRkcmVzc2VzOiBzdHJpbmdbXSwgY2FsbGJhY2s6ICh0cmFuc2FjdGlvbjogYW55KSA9PiB2b2lkKSB7XG4gICAgdGhpcy5jb25uZWN0KCkudGhlbigoKSA9PiB7XG4gICAgICB0aGlzLmNsaWVudC5yZXF1ZXN0KHtcbiAgICAgICAgY29tbWFuZDogJ3N1YnNjcmliZScsXG4gICAgICAgIGFjY291bnRzOiBhZGRyZXNzZXNcbiAgICAgIH0pXG5cbiAgICAgIHRoaXMuY2xpZW50Lm9uKCd0cmFuc2FjdGlvbicsIGNhbGxiYWNrKVxuICAgIH0pXG4gIH1cblxuICB1bnN1YnNjcmliZUZyb21UcmFuc2FjdGlvbnMoKSB7XG4gICAgdGhpcy5jbGllbnQucmVtb3ZlQWxsTGlzdGVuZXJzKCd0cmFuc2FjdGlvbicpXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHhycGxTZXJ2aWNlID0gbmV3IFhSUExTZXJ2aWNlKClcbiJdLCJuYW1lcyI6WyJDbGllbnQiLCJYUlBMU2VydmljZSIsImNvbm5lY3QiLCJpc0Nvbm5lY3RlZCIsImNsaWVudCIsImRpc2Nvbm5lY3QiLCJnZXRBY2NvdW50SW5mbyIsImFkZHJlc3MiLCJyZXF1ZXN0IiwiY29tbWFuZCIsImFjY291bnQiLCJsZWRnZXJfaW5kZXgiLCJnZXRBY2NvdW50VHJhbnNhY3Rpb25zIiwibGltaXQiLCJsZWRnZXJfaW5kZXhfbWluIiwibGVkZ2VyX2luZGV4X21heCIsImdldFRva2VuQmFsYW5jZSIsImN1cnJlbmN5IiwiaXNzdWVyIiwiYWNjb3VudEluZm8iLCJhY2NvdW50RGF0YSIsInJlc3VsdCIsImFjY291bnRfZGF0YSIsImxpbmVzIiwiTGluZXMiLCJ0b2tlbkxpbmUiLCJmaW5kIiwibGluZSIsInBhcnNlRmxvYXQiLCJiYWxhbmNlIiwiZXJyb3IiLCJjb25zb2xlIiwiZ2V0WFJQQmFsYW5jZSIsIkJhbGFuY2UiLCJzdWJzY3JpYmVUb1RyYW5zYWN0aW9ucyIsImFkZHJlc3NlcyIsImNhbGxiYWNrIiwidGhlbiIsImFjY291bnRzIiwib24iLCJ1bnN1YnNjcmliZUZyb21UcmFuc2FjdGlvbnMiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJjb25zdHJ1Y3RvciIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19YUlBMX05FVFdPUksiLCJ4cnBsU2VydmljZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/xrpl-service.ts\n"));

/***/ })

});