"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/hooks/useRealTimeData.ts":
/*!**************************************!*\
  !*** ./src/hooks/useRealTimeData.ts ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useRealTimeData: function() { return /* binding */ useRealTimeData; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _lib_xrpl_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/xrpl-service */ \"(app-pages-browser)/./src/lib/xrpl-service.ts\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n/* __next_internal_client_entry_do_not_use__ useRealTimeData auto */ \n\nfunction useRealTimeData() {\n    const [stats, setStats] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        totalSupply: \"0\",\n        circulation: \"0\",\n        activeWallets: \"0\",\n        transactions24h: \"0\"\n    });\n    const [transactions, setTransactions] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [walletBalances, setWalletBalances] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    // Configuration from environment\n    const ADMIN_ADDRESS = process.env.NEXT_PUBLIC_ADMIN_ADDRESS || \"rph2KgyZXNn3fhFrDAmwmvbS5h8dQjd2ZM\";\n    const TREASURY_ADDRESS = process.env.NEXT_PUBLIC_TREASURY_ADDRESS || \"rAbc123XYZ456DEF789GHI012JKL345MNO\";\n    const CURRENCY_CODE = process.env.NEXT_PUBLIC_CURRENCY_CODE || \"TZS\";\n    // Fetch wallet balances\n    const fetchWalletBalances = async ()=>{\n        try {\n            const adminXRP = await _lib_xrpl_service__WEBPACK_IMPORTED_MODULE_1__.xrplService.getXRPBalance(ADMIN_ADDRESS);\n            const treasuryTZS = await _lib_xrpl_service__WEBPACK_IMPORTED_MODULE_1__.xrplService.getTokenBalance(TREASURY_ADDRESS, CURRENCY_CODE, ADMIN_ADDRESS);\n            setWalletBalances({\n                [ADMIN_ADDRESS]: \"\".concat(adminXRP.toFixed(2), \" XRP\"),\n                [TREASURY_ADDRESS]: \"\".concat(treasuryTZS.toFixed(0), \" TZS\")\n            });\n        } catch (error) {\n            console.error(\"Error fetching wallet balances:\", error);\n        }\n    };\n    // Fetch recent transactions\n    const fetchTransactions = async ()=>{\n        try {\n            const adminTxs = await _lib_xrpl_service__WEBPACK_IMPORTED_MODULE_1__.xrplService.getAccountTransactions(ADMIN_ADDRESS, 10);\n            const treasuryTxs = await _lib_xrpl_service__WEBPACK_IMPORTED_MODULE_1__.xrplService.getAccountTransactions(TREASURY_ADDRESS, 10);\n            const allTxs = [\n                ...adminTxs.result.transactions,\n                ...treasuryTxs.result.transactions\n            ];\n            const formattedTxs = allTxs.map((tx)=>{\n                const transaction = tx.tx || tx;\n                const meta = tx.meta || {};\n                return {\n                    hash: transaction.hash || transaction.Hash,\n                    type: getTransactionType(transaction),\n                    amount: getTransactionAmount(transaction, meta),\n                    from: transaction.Account,\n                    to: transaction.Destination || \"N/A\",\n                    status: meta.TransactionResult === \"tesSUCCESS\" ? \"validated\" : \"failed\",\n                    timestamp: formatTimestamp(transaction.date)\n                };\n            }).slice(0, 10);\n            setTransactions(formattedTxs);\n            // Update 24h transaction count\n            setStats((prev)=>({\n                    ...prev,\n                    transactions24h: formattedTxs.length.toString()\n                }));\n        } catch (error) {\n            console.error(\"Error fetching transactions:\", error);\n        }\n    };\n    // Calculate token statistics\n    const calculateStats = async ()=>{\n        try {\n            // This would typically come from your backend API\n            // For now, we'll estimate based on available data\n            const treasuryBalance = await _lib_xrpl_service__WEBPACK_IMPORTED_MODULE_1__.xrplService.getTokenBalance(TREASURY_ADDRESS, CURRENCY_CODE, ADMIN_ADDRESS);\n            setStats((prev)=>({\n                    ...prev,\n                    totalSupply: \"1250000\",\n                    circulation: Math.max(0, 1250000 - treasuryBalance).toString(),\n                    activeWallets: \"1247\" // This should come from your backend\n                }));\n        } catch (error) {\n            console.error(\"Error calculating stats:\", error);\n        }\n    };\n    // Set up real-time transaction monitoring\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const setupRealTimeMonitoring = async ()=>{\n            try {\n                // Subscribe to real-time transactions\n                _lib_xrpl_service__WEBPACK_IMPORTED_MODULE_1__.xrplService.subscribeToTransactions([\n                    ADMIN_ADDRESS,\n                    TREASURY_ADDRESS\n                ], (transaction)=>{\n                    const newTx = {\n                        hash: transaction.transaction.hash,\n                        type: getTransactionType(transaction.transaction),\n                        amount: getTransactionAmount(transaction.transaction, transaction.meta),\n                        from: transaction.transaction.Account,\n                        to: transaction.transaction.Destination || \"N/A\",\n                        status: transaction.meta.TransactionResult === \"tesSUCCESS\" ? \"validated\" : \"failed\",\n                        timestamp: \"Just now\"\n                    };\n                    setTransactions((prev)=>[\n                            newTx,\n                            ...prev.slice(0, 9)\n                        ]);\n                });\n            } catch (error) {\n                console.error(\"Error setting up real-time monitoring:\", error);\n            }\n        };\n        setupRealTimeMonitoring();\n        return ()=>{\n            _lib_xrpl_service__WEBPACK_IMPORTED_MODULE_1__.xrplService.unsubscribeFromTransactions();\n        };\n    }, [\n        ADMIN_ADDRESS,\n        TREASURY_ADDRESS\n    ]);\n    // Initial data fetch\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const fetchInitialData = async ()=>{\n            setIsLoading(true);\n            await Promise.all([\n                fetchWalletBalances(),\n                fetchTransactions(),\n                calculateStats()\n            ]);\n            setIsLoading(false);\n        };\n        fetchInitialData();\n        // Set up periodic refresh\n        const interval = setInterval(()=>{\n            fetchWalletBalances();\n            fetchTransactions();\n            calculateStats();\n        }, 30000) // Refresh every 30 seconds\n        ;\n        return ()=>clearInterval(interval);\n    }, []);\n    return {\n        stats,\n        transactions,\n        walletBalances,\n        isLoading,\n        refreshData: ()=>{\n            fetchWalletBalances();\n            fetchTransactions();\n            calculateStats();\n        }\n    };\n}\n// Helper functions\nfunction getTransactionType(transaction) {\n    if (transaction.TransactionType === \"TrustSet\") return \"mint\";\n    if (transaction.TransactionType === \"Payment\") return \"transfer\";\n    return \"transfer\";\n}\nfunction getTransactionAmount(transaction, meta) {\n    if (transaction.Amount) {\n        if (typeof transaction.Amount === \"string\") {\n            return \"\".concat((parseInt(transaction.Amount) / 1000000).toFixed(2), \" XRP\");\n        } else {\n            return \"\".concat(transaction.Amount.value, \" \").concat(transaction.Amount.currency);\n        }\n    }\n    return \"0\";\n}\nfunction formatTimestamp(rippleTime) {\n    if (!rippleTime) return \"Unknown\";\n    // Convert Ripple timestamp to Unix timestamp\n    const unixTime = (rippleTime + 946684800) * 1000;\n    const date = new Date(unixTime);\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffMins = Math.floor(diffMs / 60000);\n    if (diffMins < 1) return \"Just now\";\n    if (diffMins < 60) return \"\".concat(diffMins, \" min ago\");\n    if (diffMins < 1440) return \"\".concat(Math.floor(diffMins / 60), \" hr ago\");\n    return date.toLocaleDateString();\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/hooks/useRealTimeData.ts\n"));

/***/ })

});