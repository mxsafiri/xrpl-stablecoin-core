"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/xrpl-secret-numbers";
exports.ids = ["vendor-chunks/xrpl-secret-numbers"];
exports.modules = {

/***/ "(ssr)/./node_modules/xrpl-secret-numbers/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/xrpl-secret-numbers/dist/index.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Utils = exports.Account = void 0;\n/* Methods  ==================================================================== */\nvar Utils = __importStar(__webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/xrpl-secret-numbers/dist/utils/index.js\"));\nexports.Utils = Utils;\n/* Types ==================================================================== */\nvar Account_1 = __importDefault(__webpack_require__(/*! ./schema/Account */ \"(ssr)/./node_modules/xrpl-secret-numbers/dist/schema/Account.js\"));\nexports.Account = Account_1.default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHJwbC1zZWNyZXQtbnVtYmVycy9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLG1DQUFtQyxvQ0FBb0MsZ0JBQWdCO0FBQ3ZGLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsMENBQTBDLDRCQUE0QjtBQUN0RSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLEdBQUcsZUFBZTtBQUMvQjtBQUNBLHlCQUF5QixtQkFBTyxDQUFDLDZFQUFTO0FBQzFDLGFBQWE7QUFDYjtBQUNBLGdDQUFnQyxtQkFBTyxDQUFDLHlGQUFrQjtBQUMxRCxlQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8veHJwbC1zdGFibGVjb2luLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy94cnBsLXNlY3JldC1udW1iZXJzL2Rpc3QvaW5kZXguanM/MTE1NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5VdGlscyA9IGV4cG9ydHMuQWNjb3VudCA9IHZvaWQgMDtcbi8qIE1ldGhvZHMgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG52YXIgVXRpbHMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vdXRpbHNcIikpO1xuZXhwb3J0cy5VdGlscyA9IFV0aWxzO1xuLyogVHlwZXMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbnZhciBBY2NvdW50XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vc2NoZW1hL0FjY291bnRcIikpO1xuZXhwb3J0cy5BY2NvdW50ID0gQWNjb3VudF8xLmRlZmF1bHQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xrpl-secret-numbers/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xrpl-secret-numbers/dist/schema/Account.js":
/*!*****************************************************************!*\
  !*** ./node_modules/xrpl-secret-numbers/dist/schema/Account.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar assert_1 = __importDefault(__webpack_require__(/*! assert */ \"assert\"));\nvar keypairs = __importStar(__webpack_require__(/*! ripple-keypairs */ \"(ssr)/./node_modules/xrpl-secret-numbers/node_modules/ripple-keypairs/dist/index.js\"));\nvar utils = __importStar(__webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/xrpl-secret-numbers/dist/utils/index.js\"));\n/* Class ==================================================================== */\nvar Account = /** @class */ (function () {\n    function Account(SecretNumbers) {\n        var _this = this;\n        this.account = {\n            familySeed: '',\n            address: '',\n            keypair: {\n                publicKey: '',\n                privateKey: ''\n            }\n        };\n        var asserts = function () {\n            assert_1.default.strictEqual(_this.secret.length, 8);\n            _this.secret.forEach(function (r, i) {\n                assert_1.default.strictEqual(r.length, 6);\n            });\n        };\n        var derive = function () {\n            try {\n                var entropy = utils.secretToEntropy(_this.secret);\n                _this.account.familySeed = keypairs.generateSeed({ entropy: entropy });\n                _this.account.keypair = keypairs.deriveKeypair(_this.account.familySeed);\n                _this.account.address = keypairs.deriveAddress(_this.account.keypair.publicKey);\n            }\n            catch (e) {\n                throw e.message;\n            }\n        };\n        if (typeof SecretNumbers === 'string') {\n            this.secret = utils.parseSecretString(SecretNumbers);\n        }\n        else if (Array.isArray(SecretNumbers)) {\n            this.secret = SecretNumbers;\n        }\n        else if (Buffer.isBuffer(SecretNumbers)) {\n            this.secret = utils.entropyToSecret(SecretNumbers);\n        }\n        else {\n            this.secret = utils.randomSecret();\n        }\n        asserts();\n        derive();\n    }\n    Account.prototype.getSecret = function () {\n        return this.secret;\n    };\n    Account.prototype.getSecretString = function () {\n        return this.secret.join(' ');\n    };\n    Account.prototype.getAddress = function () {\n        return this.account.address;\n    };\n    Account.prototype.getFamilySeed = function () {\n        return this.account.familySeed;\n    };\n    Account.prototype.getKeypair = function () {\n        return this.account.keypair;\n    };\n    Account.prototype.toString = function () {\n        return this.getSecretString();\n    };\n    return Account;\n}());\nexports[\"default\"] = Account;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHJwbC1zZWNyZXQtbnVtYmVycy9kaXN0L3NjaGVtYS9BY2NvdW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLG1DQUFtQyxvQ0FBb0MsZ0JBQWdCO0FBQ3ZGLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsMENBQTBDLDRCQUE0QjtBQUN0RSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwrQkFBK0IsbUJBQU8sQ0FBQyxzQkFBUTtBQUMvQyw0QkFBNEIsbUJBQU8sQ0FBQyw0R0FBaUI7QUFDckQseUJBQXlCLG1CQUFPLENBQUMsOEVBQVU7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtRUFBbUUsa0JBQWtCO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Qsa0JBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly94cnBsLXN0YWJsZWNvaW4tZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3hycGwtc2VjcmV0LW51bWJlcnMvZGlzdC9zY2hlbWEvQWNjb3VudC5qcz9jZmZmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgYXNzZXJ0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImFzc2VydFwiKSk7XG52YXIga2V5cGFpcnMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcInJpcHBsZS1rZXlwYWlyc1wiKSk7XG52YXIgdXRpbHMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4uL3V0aWxzXCIpKTtcbi8qIENsYXNzID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG52YXIgQWNjb3VudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBY2NvdW50KFNlY3JldE51bWJlcnMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5hY2NvdW50ID0ge1xuICAgICAgICAgICAgZmFtaWx5U2VlZDogJycsXG4gICAgICAgICAgICBhZGRyZXNzOiAnJyxcbiAgICAgICAgICAgIGtleXBhaXI6IHtcbiAgICAgICAgICAgICAgICBwdWJsaWNLZXk6ICcnLFxuICAgICAgICAgICAgICAgIHByaXZhdGVLZXk6ICcnXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHZhciBhc3NlcnRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYXNzZXJ0XzEuZGVmYXVsdC5zdHJpY3RFcXVhbChfdGhpcy5zZWNyZXQubGVuZ3RoLCA4KTtcbiAgICAgICAgICAgIF90aGlzLnNlY3JldC5mb3JFYWNoKGZ1bmN0aW9uIChyLCBpKSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0XzEuZGVmYXVsdC5zdHJpY3RFcXVhbChyLmxlbmd0aCwgNik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGRlcml2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFyIGVudHJvcHkgPSB1dGlscy5zZWNyZXRUb0VudHJvcHkoX3RoaXMuc2VjcmV0KTtcbiAgICAgICAgICAgICAgICBfdGhpcy5hY2NvdW50LmZhbWlseVNlZWQgPSBrZXlwYWlycy5nZW5lcmF0ZVNlZWQoeyBlbnRyb3B5OiBlbnRyb3B5IH0pO1xuICAgICAgICAgICAgICAgIF90aGlzLmFjY291bnQua2V5cGFpciA9IGtleXBhaXJzLmRlcml2ZUtleXBhaXIoX3RoaXMuYWNjb3VudC5mYW1pbHlTZWVkKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5hY2NvdW50LmFkZHJlc3MgPSBrZXlwYWlycy5kZXJpdmVBZGRyZXNzKF90aGlzLmFjY291bnQua2V5cGFpci5wdWJsaWNLZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlLm1lc3NhZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGlmICh0eXBlb2YgU2VjcmV0TnVtYmVycyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRoaXMuc2VjcmV0ID0gdXRpbHMucGFyc2VTZWNyZXRTdHJpbmcoU2VjcmV0TnVtYmVycyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShTZWNyZXROdW1iZXJzKSkge1xuICAgICAgICAgICAgdGhpcy5zZWNyZXQgPSBTZWNyZXROdW1iZXJzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKEJ1ZmZlci5pc0J1ZmZlcihTZWNyZXROdW1iZXJzKSkge1xuICAgICAgICAgICAgdGhpcy5zZWNyZXQgPSB1dGlscy5lbnRyb3B5VG9TZWNyZXQoU2VjcmV0TnVtYmVycyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNlY3JldCA9IHV0aWxzLnJhbmRvbVNlY3JldCgpO1xuICAgICAgICB9XG4gICAgICAgIGFzc2VydHMoKTtcbiAgICAgICAgZGVyaXZlKCk7XG4gICAgfVxuICAgIEFjY291bnQucHJvdG90eXBlLmdldFNlY3JldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VjcmV0O1xuICAgIH07XG4gICAgQWNjb3VudC5wcm90b3R5cGUuZ2V0U2VjcmV0U3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWNyZXQuam9pbignICcpO1xuICAgIH07XG4gICAgQWNjb3VudC5wcm90b3R5cGUuZ2V0QWRkcmVzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWNjb3VudC5hZGRyZXNzO1xuICAgIH07XG4gICAgQWNjb3VudC5wcm90b3R5cGUuZ2V0RmFtaWx5U2VlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWNjb3VudC5mYW1pbHlTZWVkO1xuICAgIH07XG4gICAgQWNjb3VudC5wcm90b3R5cGUuZ2V0S2V5cGFpciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWNjb3VudC5rZXlwYWlyO1xuICAgIH07XG4gICAgQWNjb3VudC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFNlY3JldFN0cmluZygpO1xuICAgIH07XG4gICAgcmV0dXJuIEFjY291bnQ7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gQWNjb3VudDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xrpl-secret-numbers/dist/schema/Account.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xrpl-secret-numbers/dist/utils/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/xrpl-secret-numbers/dist/utils/index.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.parseSecretString = exports.checkChecksum = exports.calculateChecksum = exports.secretToEntropy = exports.entropyToSecret = exports.randomSecret = exports.randomEntropy = void 0;\nvar assert_1 = __importDefault(__webpack_require__(/*! assert */ \"assert\"));\nvar brorand_1 = __importDefault(__webpack_require__(/*! brorand */ \"(ssr)/./node_modules/brorand/index.js\"));\nfunction randomEntropy() {\n    return Buffer.from(brorand_1.default(16));\n}\nexports.randomEntropy = randomEntropy;\nfunction calculateChecksum(position, value) {\n    return value * (position * 2 + 1) % 9;\n}\nexports.calculateChecksum = calculateChecksum;\nfunction checkChecksum(position, value, checksum) {\n    if (typeof value === 'string') {\n        assert_1.default.strictEqual(value.length, 6);\n        checksum = parseInt(value.slice(5), 10);\n        value = parseInt(value.slice(0, 5), 10);\n    }\n    return value * (position * 2 + 1) % 9 === checksum;\n}\nexports.checkChecksum = checkChecksum;\nfunction entropyToSecret(entropy) {\n    var length = Array(Math.ceil(entropy.length / 2));\n    var chunks = Array.apply(null, length).map(function (a, b) {\n        return entropy.slice(b * 2, ++b * 2);\n    }).map(function (r, i) {\n        var no = parseInt(r.toString('hex'), 16);\n        var fill = '0'.repeat(5 - String(no).length);\n        return fill + String(no) + String(calculateChecksum(i, no));\n    });\n    assert_1.default.equal(chunks.length, 8);\n    return chunks;\n}\nexports.entropyToSecret = entropyToSecret;\nfunction randomSecret() {\n    return entropyToSecret(randomEntropy());\n}\nexports.randomSecret = randomSecret;\nfunction secretToEntropy(secret) {\n    return Buffer.concat(secret.map(function (r, i) {\n        var no = Number(r.slice(0, 5));\n        var checksum = Number(r.slice(5));\n        try {\n            assert_1.default.strictEqual(r.length, 6);\n        }\n        catch (e) {\n            throw new Error('Invalid secret: number invalid');\n        }\n        try {\n            assert_1.default.strictEqual(checkChecksum(i, no, checksum), true);\n        }\n        catch (e) {\n            throw new Error('Invalid secret part: checksum invalid');\n        }\n        var hex = ('0000' + no.toString(16)).slice(-4);\n        return Buffer.from(hex, 'hex');\n    }));\n}\nexports.secretToEntropy = secretToEntropy;\nfunction parseSecretString(secret) {\n    secret = secret.replace(/[^0-9]/g, '');\n    if (secret.length !== 48) {\n        throw new Error('Invalid secret string (should contain 8 blocks of 6 digits');\n    }\n    return Array.apply(null, Array(8)).map(function (a, i) {\n        return secret.slice(i * 6, (i + 1) * 6);\n    });\n}\nexports.parseSecretString = parseSecretString;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHJwbC1zZWNyZXQtbnVtYmVycy9kaXN0L3V0aWxzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCLEdBQUcscUJBQXFCLEdBQUcseUJBQXlCLEdBQUcsdUJBQXVCLEdBQUcsdUJBQXVCLEdBQUcsb0JBQW9CLEdBQUcscUJBQXFCO0FBQ2hMLCtCQUErQixtQkFBTyxDQUFDLHNCQUFRO0FBQy9DLGdDQUFnQyxtQkFBTyxDQUFDLHNEQUFTO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSx5QkFBeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly94cnBsLXN0YWJsZWNvaW4tZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3hycGwtc2VjcmV0LW51bWJlcnMvZGlzdC91dGlscy9pbmRleC5qcz83NGIwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucGFyc2VTZWNyZXRTdHJpbmcgPSBleHBvcnRzLmNoZWNrQ2hlY2tzdW0gPSBleHBvcnRzLmNhbGN1bGF0ZUNoZWNrc3VtID0gZXhwb3J0cy5zZWNyZXRUb0VudHJvcHkgPSBleHBvcnRzLmVudHJvcHlUb1NlY3JldCA9IGV4cG9ydHMucmFuZG9tU2VjcmV0ID0gZXhwb3J0cy5yYW5kb21FbnRyb3B5ID0gdm9pZCAwO1xudmFyIGFzc2VydF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJhc3NlcnRcIikpO1xudmFyIGJyb3JhbmRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiYnJvcmFuZFwiKSk7XG5mdW5jdGlvbiByYW5kb21FbnRyb3B5KCkge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShicm9yYW5kXzEuZGVmYXVsdCgxNikpO1xufVxuZXhwb3J0cy5yYW5kb21FbnRyb3B5ID0gcmFuZG9tRW50cm9weTtcbmZ1bmN0aW9uIGNhbGN1bGF0ZUNoZWNrc3VtKHBvc2l0aW9uLCB2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAqIChwb3NpdGlvbiAqIDIgKyAxKSAlIDk7XG59XG5leHBvcnRzLmNhbGN1bGF0ZUNoZWNrc3VtID0gY2FsY3VsYXRlQ2hlY2tzdW07XG5mdW5jdGlvbiBjaGVja0NoZWNrc3VtKHBvc2l0aW9uLCB2YWx1ZSwgY2hlY2tzdW0pIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICBhc3NlcnRfMS5kZWZhdWx0LnN0cmljdEVxdWFsKHZhbHVlLmxlbmd0aCwgNik7XG4gICAgICAgIGNoZWNrc3VtID0gcGFyc2VJbnQodmFsdWUuc2xpY2UoNSksIDEwKTtcbiAgICAgICAgdmFsdWUgPSBwYXJzZUludCh2YWx1ZS5zbGljZSgwLCA1KSwgMTApO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWUgKiAocG9zaXRpb24gKiAyICsgMSkgJSA5ID09PSBjaGVja3N1bTtcbn1cbmV4cG9ydHMuY2hlY2tDaGVja3N1bSA9IGNoZWNrQ2hlY2tzdW07XG5mdW5jdGlvbiBlbnRyb3B5VG9TZWNyZXQoZW50cm9weSkge1xuICAgIHZhciBsZW5ndGggPSBBcnJheShNYXRoLmNlaWwoZW50cm9weS5sZW5ndGggLyAyKSk7XG4gICAgdmFyIGNodW5rcyA9IEFycmF5LmFwcGx5KG51bGwsIGxlbmd0aCkubWFwKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBlbnRyb3B5LnNsaWNlKGIgKiAyLCArK2IgKiAyKTtcbiAgICB9KS5tYXAoZnVuY3Rpb24gKHIsIGkpIHtcbiAgICAgICAgdmFyIG5vID0gcGFyc2VJbnQoci50b1N0cmluZygnaGV4JyksIDE2KTtcbiAgICAgICAgdmFyIGZpbGwgPSAnMCcucmVwZWF0KDUgLSBTdHJpbmcobm8pLmxlbmd0aCk7XG4gICAgICAgIHJldHVybiBmaWxsICsgU3RyaW5nKG5vKSArIFN0cmluZyhjYWxjdWxhdGVDaGVja3N1bShpLCBubykpO1xuICAgIH0pO1xuICAgIGFzc2VydF8xLmRlZmF1bHQuZXF1YWwoY2h1bmtzLmxlbmd0aCwgOCk7XG4gICAgcmV0dXJuIGNodW5rcztcbn1cbmV4cG9ydHMuZW50cm9weVRvU2VjcmV0ID0gZW50cm9weVRvU2VjcmV0O1xuZnVuY3Rpb24gcmFuZG9tU2VjcmV0KCkge1xuICAgIHJldHVybiBlbnRyb3B5VG9TZWNyZXQocmFuZG9tRW50cm9weSgpKTtcbn1cbmV4cG9ydHMucmFuZG9tU2VjcmV0ID0gcmFuZG9tU2VjcmV0O1xuZnVuY3Rpb24gc2VjcmV0VG9FbnRyb3B5KHNlY3JldCkge1xuICAgIHJldHVybiBCdWZmZXIuY29uY2F0KHNlY3JldC5tYXAoZnVuY3Rpb24gKHIsIGkpIHtcbiAgICAgICAgdmFyIG5vID0gTnVtYmVyKHIuc2xpY2UoMCwgNSkpO1xuICAgICAgICB2YXIgY2hlY2tzdW0gPSBOdW1iZXIoci5zbGljZSg1KSk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhc3NlcnRfMS5kZWZhdWx0LnN0cmljdEVxdWFsKHIubGVuZ3RoLCA2KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHNlY3JldDogbnVtYmVyIGludmFsaWQnKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXNzZXJ0XzEuZGVmYXVsdC5zdHJpY3RFcXVhbChjaGVja0NoZWNrc3VtKGksIG5vLCBjaGVja3N1bSksIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc2VjcmV0IHBhcnQ6IGNoZWNrc3VtIGludmFsaWQnKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaGV4ID0gKCcwMDAwJyArIG5vLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTQpO1xuICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20oaGV4LCAnaGV4Jyk7XG4gICAgfSkpO1xufVxuZXhwb3J0cy5zZWNyZXRUb0VudHJvcHkgPSBzZWNyZXRUb0VudHJvcHk7XG5mdW5jdGlvbiBwYXJzZVNlY3JldFN0cmluZyhzZWNyZXQpIHtcbiAgICBzZWNyZXQgPSBzZWNyZXQucmVwbGFjZSgvW14wLTldL2csICcnKTtcbiAgICBpZiAoc2VjcmV0Lmxlbmd0aCAhPT0gNDgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHNlY3JldCBzdHJpbmcgKHNob3VsZCBjb250YWluIDggYmxvY2tzIG9mIDYgZGlnaXRzJyk7XG4gICAgfVxuICAgIHJldHVybiBBcnJheS5hcHBseShudWxsLCBBcnJheSg4KSkubWFwKGZ1bmN0aW9uIChhLCBpKSB7XG4gICAgICAgIHJldHVybiBzZWNyZXQuc2xpY2UoaSAqIDYsIChpICsgMSkgKiA2KTtcbiAgICB9KTtcbn1cbmV4cG9ydHMucGFyc2VTZWNyZXRTdHJpbmcgPSBwYXJzZVNlY3JldFN0cmluZztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xrpl-secret-numbers/dist/utils/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xrpl-secret-numbers/node_modules/ripple-address-codec/dist/index.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/xrpl-secret-numbers/node_modules/ripple-address-codec/dist/index.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isValidXAddress = exports.decodeXAddress = exports.xAddressToClassicAddress = exports.encodeXAddress = exports.classicAddressToXAddress = exports.isValidClassicAddress = exports.decodeAccountPublic = exports.encodeAccountPublic = exports.decodeNodePublic = exports.encodeNodePublic = exports.decodeAccountID = exports.encodeAccountID = exports.decodeSeed = exports.encodeSeed = exports.codec = void 0;\nconst utils_1 = __webpack_require__(/*! @xrplf/isomorphic/utils */ \"(ssr)/./node_modules/@xrplf/isomorphic/dist/utils/index.js\");\nconst xrp_codec_1 = __webpack_require__(/*! ./xrp-codec */ \"(ssr)/./node_modules/xrpl-secret-numbers/node_modules/ripple-address-codec/dist/xrp-codec.js\");\nObject.defineProperty(exports, \"codec\", ({ enumerable: true, get: function () { return xrp_codec_1.codec; } }));\nObject.defineProperty(exports, \"encodeSeed\", ({ enumerable: true, get: function () { return xrp_codec_1.encodeSeed; } }));\nObject.defineProperty(exports, \"decodeSeed\", ({ enumerable: true, get: function () { return xrp_codec_1.decodeSeed; } }));\nObject.defineProperty(exports, \"encodeAccountID\", ({ enumerable: true, get: function () { return xrp_codec_1.encodeAccountID; } }));\nObject.defineProperty(exports, \"decodeAccountID\", ({ enumerable: true, get: function () { return xrp_codec_1.decodeAccountID; } }));\nObject.defineProperty(exports, \"encodeNodePublic\", ({ enumerable: true, get: function () { return xrp_codec_1.encodeNodePublic; } }));\nObject.defineProperty(exports, \"decodeNodePublic\", ({ enumerable: true, get: function () { return xrp_codec_1.decodeNodePublic; } }));\nObject.defineProperty(exports, \"encodeAccountPublic\", ({ enumerable: true, get: function () { return xrp_codec_1.encodeAccountPublic; } }));\nObject.defineProperty(exports, \"decodeAccountPublic\", ({ enumerable: true, get: function () { return xrp_codec_1.decodeAccountPublic; } }));\nObject.defineProperty(exports, \"isValidClassicAddress\", ({ enumerable: true, get: function () { return xrp_codec_1.isValidClassicAddress; } }));\nconst PREFIX_BYTES = {\n    // 5, 68\n    main: Uint8Array.from([0x05, 0x44]),\n    // 4, 147\n    test: Uint8Array.from([0x04, 0x93]),\n};\nconst MAX_32_BIT_UNSIGNED_INT = 4294967295;\nfunction classicAddressToXAddress(classicAddress, tag, test) {\n    const accountId = (0, xrp_codec_1.decodeAccountID)(classicAddress);\n    return encodeXAddress(accountId, tag, test);\n}\nexports.classicAddressToXAddress = classicAddressToXAddress;\nfunction encodeXAddress(accountId, tag, test) {\n    if (accountId.length !== 20) {\n        // RIPEMD160 is 160 bits = 20 bytes\n        throw new Error('Account ID must be 20 bytes');\n    }\n    if (tag !== false && tag > MAX_32_BIT_UNSIGNED_INT) {\n        throw new Error('Invalid tag');\n    }\n    const theTag = tag || 0;\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- Passing null is a common js mistake\n    const flag = tag === false || tag == null ? 0 : 1;\n    /* eslint-disable no-bitwise ---\n     * need to use bitwise operations here */\n    const bytes = (0, utils_1.concat)([\n        test ? PREFIX_BYTES.test : PREFIX_BYTES.main,\n        accountId,\n        Uint8Array.from([\n            // 0x00 if no tag, 0x01 if 32-bit tag\n            flag,\n            // first byte\n            theTag & 0xff,\n            // second byte\n            (theTag >> 8) & 0xff,\n            // third byte\n            (theTag >> 16) & 0xff,\n            // fourth byte\n            (theTag >> 24) & 0xff,\n            0,\n            0,\n            0,\n            // four zero bytes (reserved for 64-bit tags)\n            0,\n        ]),\n    ]);\n    /* eslint-enable no-bitwise */\n    return xrp_codec_1.codec.encodeChecked(bytes);\n}\nexports.encodeXAddress = encodeXAddress;\nfunction xAddressToClassicAddress(xAddress) {\n    /* eslint-disable @typescript-eslint/naming-convention --\n     * TODO 'test' should be something like 'isTest', do this later\n     */\n    const { accountId, tag, test } = decodeXAddress(xAddress);\n    /* eslint-enable @typescript-eslint/naming-convention */\n    const classicAddress = (0, xrp_codec_1.encodeAccountID)(accountId);\n    return {\n        classicAddress,\n        tag,\n        test,\n    };\n}\nexports.xAddressToClassicAddress = xAddressToClassicAddress;\nfunction decodeXAddress(xAddress) {\n    const decoded = xrp_codec_1.codec.decodeChecked(xAddress);\n    /* eslint-disable @typescript-eslint/naming-convention --\n     * TODO 'test' should be something like 'isTest', do this later\n     */\n    const test = isUint8ArrayForTestAddress(decoded);\n    /* eslint-enable @typescript-eslint/naming-convention */\n    const accountId = decoded.slice(2, 22);\n    const tag = tagFromUint8Array(decoded);\n    return {\n        accountId,\n        tag,\n        test,\n    };\n}\nexports.decodeXAddress = decodeXAddress;\nfunction isUint8ArrayForTestAddress(buf) {\n    const decodedPrefix = buf.slice(0, 2);\n    if ((0, utils_1.equal)(PREFIX_BYTES.main, decodedPrefix)) {\n        return false;\n    }\n    if ((0, utils_1.equal)(PREFIX_BYTES.test, decodedPrefix)) {\n        return true;\n    }\n    throw new Error('Invalid X-address: bad prefix');\n}\nfunction tagFromUint8Array(buf) {\n    const flag = buf[22];\n    if (flag >= 2) {\n        // No support for 64-bit tags at this time\n        throw new Error('Unsupported X-address');\n    }\n    if (flag === 1) {\n        // Little-endian to big-endian\n        return buf[23] + buf[24] * 0x100 + buf[25] * 0x10000 + buf[26] * 0x1000000;\n    }\n    if (flag !== 0) {\n        throw new Error('flag must be zero to indicate no tag');\n    }\n    if (!(0, utils_1.equal)((0, utils_1.hexToBytes)('0000000000000000'), buf.slice(23, 23 + 8))) {\n        throw new Error('remaining bytes must be zero');\n    }\n    return false;\n}\nfunction isValidXAddress(xAddress) {\n    try {\n        decodeXAddress(xAddress);\n    }\n    catch (_error) {\n        return false;\n    }\n    return true;\n}\nexports.isValidXAddress = isValidXAddress;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xrpl-secret-numbers/node_modules/ripple-address-codec/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xrpl-secret-numbers/node_modules/ripple-address-codec/dist/utils.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/xrpl-secret-numbers/node_modules/ripple-address-codec/dist/utils.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.concatArgs = exports.arrayEqual = void 0;\n/**\n * Check whether two sequences (e.g. Arrays of numbers) are equal.\n *\n * @param arr1 - One of the arrays to compare.\n * @param arr2 - The other array to compare.\n */\nfunction arrayEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    return arr1.every((value, index) => value === arr2[index]);\n}\nexports.arrayEqual = arrayEqual;\n/**\n * Check whether a value is a scalar\n *\n * @param val - The value to check.\n */\nfunction isScalar(val) {\n    return typeof val === 'number';\n}\n/**\n * Concatenate all `arguments` into a single array. Each argument can be either\n * a single element or a sequence, which has a `length` property and supports\n * element retrieval via sequence[ix].\n *\n * > concatArgs(1, [2, 3], Uint8Array.from([4,5]), new Uint8Array([6, 7]));\n * [1,2,3,4,5,6,7]\n *\n * @param args - Concatenate of these args into a single array.\n * @returns Array of concatenated arguments\n */\nfunction concatArgs(...args) {\n    return args.flatMap((arg) => {\n        return isScalar(arg) ? [arg] : Array.from(arg);\n    });\n}\nexports.concatArgs = concatArgs;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHJwbC1zZWNyZXQtbnVtYmVycy9ub2RlX21vZHVsZXMvcmlwcGxlLWFkZHJlc3MtY29kZWMvZGlzdC91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQkFBa0IsR0FBRyxrQkFBa0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0Esa0JBQWtCO0FBQ2xCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8veHJwbC1zdGFibGVjb2luLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy94cnBsLXNlY3JldC1udW1iZXJzL25vZGVfbW9kdWxlcy9yaXBwbGUtYWRkcmVzcy1jb2RlYy9kaXN0L3V0aWxzLmpzP2ZmZWIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvbmNhdEFyZ3MgPSBleHBvcnRzLmFycmF5RXF1YWwgPSB2b2lkIDA7XG4vKipcbiAqIENoZWNrIHdoZXRoZXIgdHdvIHNlcXVlbmNlcyAoZS5nLiBBcnJheXMgb2YgbnVtYmVycykgYXJlIGVxdWFsLlxuICpcbiAqIEBwYXJhbSBhcnIxIC0gT25lIG9mIHRoZSBhcnJheXMgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSBhcnIyIC0gVGhlIG90aGVyIGFycmF5IHRvIGNvbXBhcmUuXG4gKi9cbmZ1bmN0aW9uIGFycmF5RXF1YWwoYXJyMSwgYXJyMikge1xuICAgIGlmIChhcnIxLmxlbmd0aCAhPT0gYXJyMi5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gYXJyMS5ldmVyeSgodmFsdWUsIGluZGV4KSA9PiB2YWx1ZSA9PT0gYXJyMltpbmRleF0pO1xufVxuZXhwb3J0cy5hcnJheUVxdWFsID0gYXJyYXlFcXVhbDtcbi8qKlxuICogQ2hlY2sgd2hldGhlciBhIHZhbHVlIGlzIGEgc2NhbGFyXG4gKlxuICogQHBhcmFtIHZhbCAtIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqL1xuZnVuY3Rpb24gaXNTY2FsYXIodmFsKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuLyoqXG4gKiBDb25jYXRlbmF0ZSBhbGwgYGFyZ3VtZW50c2AgaW50byBhIHNpbmdsZSBhcnJheS4gRWFjaCBhcmd1bWVudCBjYW4gYmUgZWl0aGVyXG4gKiBhIHNpbmdsZSBlbGVtZW50IG9yIGEgc2VxdWVuY2UsIHdoaWNoIGhhcyBhIGBsZW5ndGhgIHByb3BlcnR5IGFuZCBzdXBwb3J0c1xuICogZWxlbWVudCByZXRyaWV2YWwgdmlhIHNlcXVlbmNlW2l4XS5cbiAqXG4gKiA+IGNvbmNhdEFyZ3MoMSwgWzIsIDNdLCBVaW50OEFycmF5LmZyb20oWzQsNV0pLCBuZXcgVWludDhBcnJheShbNiwgN10pKTtcbiAqIFsxLDIsMyw0LDUsNiw3XVxuICpcbiAqIEBwYXJhbSBhcmdzIC0gQ29uY2F0ZW5hdGUgb2YgdGhlc2UgYXJncyBpbnRvIGEgc2luZ2xlIGFycmF5LlxuICogQHJldHVybnMgQXJyYXkgb2YgY29uY2F0ZW5hdGVkIGFyZ3VtZW50c1xuICovXG5mdW5jdGlvbiBjb25jYXRBcmdzKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gYXJncy5mbGF0TWFwKChhcmcpID0+IHtcbiAgICAgICAgcmV0dXJuIGlzU2NhbGFyKGFyZykgPyBbYXJnXSA6IEFycmF5LmZyb20oYXJnKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuY29uY2F0QXJncyA9IGNvbmNhdEFyZ3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xrpl-secret-numbers/node_modules/ripple-address-codec/dist/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xrpl-secret-numbers/node_modules/ripple-address-codec/dist/xrp-codec.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/xrpl-secret-numbers/node_modules/ripple-address-codec/dist/xrp-codec.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Codec class\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isValidClassicAddress = exports.decodeAccountPublic = exports.encodeAccountPublic = exports.encodeNodePublic = exports.decodeNodePublic = exports.decodeAddress = exports.decodeAccountID = exports.encodeAddress = exports.encodeAccountID = exports.decodeSeed = exports.encodeSeed = exports.codec = void 0;\nconst base_1 = __webpack_require__(/*! @scure/base */ \"(ssr)/./node_modules/@scure/base/lib/index.js\");\nconst sha256_1 = __webpack_require__(/*! @xrplf/isomorphic/sha256 */ \"(ssr)/./node_modules/@xrplf/isomorphic/dist/sha256/index.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/xrpl-secret-numbers/node_modules/ripple-address-codec/dist/utils.js\");\nclass Codec {\n    constructor(options) {\n        this._sha256 = options.sha256;\n        this._codec = base_1.base58xrp;\n    }\n    /**\n     * Encoder.\n     *\n     * @param bytes - Uint8Array of data to encode.\n     * @param opts - Options object including the version bytes and the expected length of the data to encode.\n     */\n    encode(bytes, opts) {\n        const versions = opts.versions;\n        return this._encodeVersioned(bytes, versions, opts.expectedLength);\n    }\n    /**\n     * Decoder.\n     *\n     * @param base58string - Base58Check-encoded string to decode.\n     * @param opts - Options object including the version byte(s) and the expected length of the data after decoding.\n     */\n    /* eslint-disable max-lines-per-function --\n     * TODO refactor */\n    decode(base58string, opts) {\n        var _a;\n        const versions = opts.versions;\n        const types = opts.versionTypes;\n        const withoutSum = this.decodeChecked(base58string);\n        if (versions.length > 1 && !opts.expectedLength) {\n            throw new Error('expectedLength is required because there are >= 2 possible versions');\n        }\n        const versionLengthGuess = typeof versions[0] === 'number' ? 1 : versions[0].length;\n        const payloadLength = (_a = opts.expectedLength) !== null && _a !== void 0 ? _a : withoutSum.length - versionLengthGuess;\n        const versionBytes = withoutSum.slice(0, -payloadLength);\n        const payload = withoutSum.slice(-payloadLength);\n        for (let i = 0; i < versions.length; i++) {\n            /* eslint-disable @typescript-eslint/consistent-type-assertions --\n             * TODO refactor */\n            const version = Array.isArray(versions[i])\n                ? versions[i]\n                : [versions[i]];\n            if ((0, utils_1.arrayEqual)(versionBytes, version)) {\n                return {\n                    version,\n                    bytes: payload,\n                    type: types ? types[i] : null,\n                };\n            }\n            /* eslint-enable @typescript-eslint/consistent-type-assertions */\n        }\n        throw new Error('version_invalid: version bytes do not match any of the provided version(s)');\n    }\n    encodeChecked(bytes) {\n        const check = this._sha256(this._sha256(bytes)).slice(0, 4);\n        return this._encodeRaw(Uint8Array.from((0, utils_1.concatArgs)(bytes, check)));\n    }\n    decodeChecked(base58string) {\n        const intArray = this._decodeRaw(base58string);\n        if (intArray.byteLength < 5) {\n            throw new Error('invalid_input_size: decoded data must have length >= 5');\n        }\n        if (!this._verifyCheckSum(intArray)) {\n            throw new Error('checksum_invalid');\n        }\n        return intArray.slice(0, -4);\n    }\n    _encodeVersioned(bytes, versions, expectedLength) {\n        if (!checkByteLength(bytes, expectedLength)) {\n            throw new Error('unexpected_payload_length: bytes.length does not match expectedLength.' +\n                ' Ensure that the bytes are a Uint8Array.');\n        }\n        return this.encodeChecked((0, utils_1.concatArgs)(versions, bytes));\n    }\n    _encodeRaw(bytes) {\n        return this._codec.encode(Uint8Array.from(bytes));\n    }\n    /* eslint-enable max-lines-per-function */\n    _decodeRaw(base58string) {\n        return this._codec.decode(base58string);\n    }\n    _verifyCheckSum(bytes) {\n        const computed = this._sha256(this._sha256(bytes.slice(0, -4))).slice(0, 4);\n        const checksum = bytes.slice(-4);\n        return (0, utils_1.arrayEqual)(computed, checksum);\n    }\n}\n/**\n * XRP codec\n */\n// base58 encodings: https://xrpl.org/base58-encodings.html\n// Account address (20 bytes)\nconst ACCOUNT_ID = 0;\n// Account public key (33 bytes)\nconst ACCOUNT_PUBLIC_KEY = 0x23;\n// 33; Seed value (for secret keys) (16 bytes)\nconst FAMILY_SEED = 0x21;\n// 28; Validation public key (33 bytes)\nconst NODE_PUBLIC = 0x1c;\n// [1, 225, 75]\nconst ED25519_SEED = [0x01, 0xe1, 0x4b];\nconst codecOptions = {\n    sha256: sha256_1.sha256,\n};\nconst codecWithXrpAlphabet = new Codec(codecOptions);\nexports.codec = codecWithXrpAlphabet;\n// entropy is a Uint8Array of size 16\n// type is 'ed25519' or 'secp256k1'\nfunction encodeSeed(entropy, type) {\n    if (!checkByteLength(entropy, 16)) {\n        throw new Error('entropy must have length 16');\n    }\n    const opts = {\n        expectedLength: 16,\n        // for secp256k1, use `FAMILY_SEED`\n        versions: type === 'ed25519' ? ED25519_SEED : [FAMILY_SEED],\n    };\n    // prefixes entropy with version bytes\n    return codecWithXrpAlphabet.encode(entropy, opts);\n}\nexports.encodeSeed = encodeSeed;\nfunction decodeSeed(seed, opts = {\n    versionTypes: ['ed25519', 'secp256k1'],\n    versions: [ED25519_SEED, FAMILY_SEED],\n    expectedLength: 16,\n}) {\n    return codecWithXrpAlphabet.decode(seed, opts);\n}\nexports.decodeSeed = decodeSeed;\nfunction encodeAccountID(bytes) {\n    const opts = { versions: [ACCOUNT_ID], expectedLength: 20 };\n    return codecWithXrpAlphabet.encode(bytes, opts);\n}\nexports.encodeAccountID = encodeAccountID;\n/* eslint-disable import/no-unused-modules ---\n * unclear why this is aliased but we should keep it in case someone else is\n * importing it with the aliased name */\nexports.encodeAddress = encodeAccountID;\n/* eslint-enable import/no-unused-modules */\nfunction decodeAccountID(accountId) {\n    const opts = { versions: [ACCOUNT_ID], expectedLength: 20 };\n    return codecWithXrpAlphabet.decode(accountId, opts).bytes;\n}\nexports.decodeAccountID = decodeAccountID;\n/* eslint-disable import/no-unused-modules ---\n * unclear why this is aliased but we should keep it in case someone else is\n * importing it with the aliased name */\nexports.decodeAddress = decodeAccountID;\n/* eslint-enable import/no-unused-modules */\nfunction decodeNodePublic(base58string) {\n    const opts = { versions: [NODE_PUBLIC], expectedLength: 33 };\n    return codecWithXrpAlphabet.decode(base58string, opts).bytes;\n}\nexports.decodeNodePublic = decodeNodePublic;\nfunction encodeNodePublic(bytes) {\n    const opts = { versions: [NODE_PUBLIC], expectedLength: 33 };\n    return codecWithXrpAlphabet.encode(bytes, opts);\n}\nexports.encodeNodePublic = encodeNodePublic;\nfunction encodeAccountPublic(bytes) {\n    const opts = { versions: [ACCOUNT_PUBLIC_KEY], expectedLength: 33 };\n    return codecWithXrpAlphabet.encode(bytes, opts);\n}\nexports.encodeAccountPublic = encodeAccountPublic;\nfunction decodeAccountPublic(base58string) {\n    const opts = { versions: [ACCOUNT_PUBLIC_KEY], expectedLength: 33 };\n    return codecWithXrpAlphabet.decode(base58string, opts).bytes;\n}\nexports.decodeAccountPublic = decodeAccountPublic;\nfunction isValidClassicAddress(address) {\n    try {\n        decodeAccountID(address);\n    }\n    catch (_error) {\n        return false;\n    }\n    return true;\n}\nexports.isValidClassicAddress = isValidClassicAddress;\nfunction checkByteLength(bytes, expectedLength) {\n    return 'byteLength' in bytes\n        ? bytes.byteLength === expectedLength\n        : bytes.length === expectedLength;\n}\n//# sourceMappingURL=xrp-codec.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xrpl-secret-numbers/node_modules/ripple-address-codec/dist/xrp-codec.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xrpl-secret-numbers/node_modules/ripple-keypairs/dist/index.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/xrpl-secret-numbers/node_modules/ripple-keypairs/dist/index.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.decodeSeed = exports.deriveNodeAddress = exports.deriveAddress = exports.verify = exports.sign = exports.deriveKeypair = exports.generateSeed = void 0;\nconst ripple_address_codec_1 = __webpack_require__(/*! ripple-address-codec */ \"(ssr)/./node_modules/xrpl-secret-numbers/node_modules/ripple-address-codec/dist/index.js\");\nObject.defineProperty(exports, \"decodeSeed\", ({ enumerable: true, get: function () { return ripple_address_codec_1.decodeSeed; } }));\nconst ripemd160_1 = __webpack_require__(/*! @xrplf/isomorphic/ripemd160 */ \"(ssr)/./node_modules/@xrplf/isomorphic/dist/ripemd160/index.js\");\nconst sha256_1 = __webpack_require__(/*! @xrplf/isomorphic/sha256 */ \"(ssr)/./node_modules/@xrplf/isomorphic/dist/sha256/index.js\");\nconst utils_1 = __webpack_require__(/*! @xrplf/isomorphic/utils */ \"(ssr)/./node_modules/@xrplf/isomorphic/dist/utils/index.js\");\nconst utils_2 = __webpack_require__(/*! ./signing-schemes/secp256k1/utils */ \"(ssr)/./node_modules/xrpl-secret-numbers/node_modules/ripple-keypairs/dist/signing-schemes/secp256k1/utils.js\");\nconst Sha512_1 = __importDefault(__webpack_require__(/*! ./utils/Sha512 */ \"(ssr)/./node_modules/xrpl-secret-numbers/node_modules/ripple-keypairs/dist/utils/Sha512.js\"));\nconst assert_1 = __importDefault(__webpack_require__(/*! ./utils/assert */ \"(ssr)/./node_modules/xrpl-secret-numbers/node_modules/ripple-keypairs/dist/utils/assert.js\"));\nconst getAlgorithmFromKey_1 = __webpack_require__(/*! ./utils/getAlgorithmFromKey */ \"(ssr)/./node_modules/xrpl-secret-numbers/node_modules/ripple-keypairs/dist/utils/getAlgorithmFromKey.js\");\nconst secp256k1_1 = __importDefault(__webpack_require__(/*! ./signing-schemes/secp256k1 */ \"(ssr)/./node_modules/xrpl-secret-numbers/node_modules/ripple-keypairs/dist/signing-schemes/secp256k1/index.js\"));\nconst ed25519_1 = __importDefault(__webpack_require__(/*! ./signing-schemes/ed25519 */ \"(ssr)/./node_modules/xrpl-secret-numbers/node_modules/ripple-keypairs/dist/signing-schemes/ed25519/index.js\"));\nfunction getSigningScheme(algorithm) {\n    const schemes = { 'ecdsa-secp256k1': secp256k1_1.default, ed25519: ed25519_1.default };\n    return schemes[algorithm];\n}\nfunction generateSeed(options = {}) {\n    assert_1.default.ok(!options.entropy || options.entropy.length >= 16, 'entropy too short');\n    const entropy = options.entropy\n        ? options.entropy.slice(0, 16)\n        : (0, utils_1.randomBytes)(16);\n    const type = options.algorithm === 'ed25519' ? 'ed25519' : 'secp256k1';\n    return (0, ripple_address_codec_1.encodeSeed)(entropy, type);\n}\nexports.generateSeed = generateSeed;\nfunction deriveKeypair(seed, options) {\n    var _a;\n    const decoded = (0, ripple_address_codec_1.decodeSeed)(seed);\n    const proposedAlgorithm = (_a = options === null || options === void 0 ? void 0 : options.algorithm) !== null && _a !== void 0 ? _a : decoded.type;\n    const algorithm = proposedAlgorithm === 'ed25519' ? 'ed25519' : 'ecdsa-secp256k1';\n    const scheme = getSigningScheme(algorithm);\n    const keypair = scheme.deriveKeypair(decoded.bytes, options);\n    const messageToVerify = Sha512_1.default.half('This test message should verify.');\n    const signature = scheme.sign(messageToVerify, keypair.privateKey);\n    /* istanbul ignore if */\n    if (!scheme.verify(messageToVerify, signature, keypair.publicKey)) {\n        throw new Error('derived keypair did not generate verifiable signature');\n    }\n    return keypair;\n}\nexports.deriveKeypair = deriveKeypair;\nfunction sign(messageHex, privateKey) {\n    const algorithm = (0, getAlgorithmFromKey_1.getAlgorithmFromPrivateKey)(privateKey);\n    return getSigningScheme(algorithm).sign((0, utils_1.hexToBytes)(messageHex), privateKey);\n}\nexports.sign = sign;\nfunction verify(messageHex, signature, publicKey) {\n    const algorithm = (0, getAlgorithmFromKey_1.getAlgorithmFromPublicKey)(publicKey);\n    return getSigningScheme(algorithm).verify((0, utils_1.hexToBytes)(messageHex), signature, publicKey);\n}\nexports.verify = verify;\nfunction computePublicKeyHash(publicKeyBytes) {\n    return (0, ripemd160_1.ripemd160)((0, sha256_1.sha256)(publicKeyBytes));\n}\nfunction deriveAddressFromBytes(publicKeyBytes) {\n    return (0, ripple_address_codec_1.encodeAccountID)(computePublicKeyHash(publicKeyBytes));\n}\nfunction deriveAddress(publicKey) {\n    return deriveAddressFromBytes((0, utils_1.hexToBytes)(publicKey));\n}\nexports.deriveAddress = deriveAddress;\nfunction deriveNodeAddress(publicKey) {\n    const generatorBytes = (0, ripple_address_codec_1.decodeNodePublic)(publicKey);\n    const accountPublicBytes = (0, utils_2.accountPublicFromPublicGenerator)(generatorBytes);\n    return deriveAddressFromBytes(accountPublicBytes);\n}\nexports.deriveNodeAddress = deriveNodeAddress;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHJwbC1zZWNyZXQtbnVtYmVycy9ub2RlX21vZHVsZXMvcmlwcGxlLWtleXBhaXJzL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQkFBa0IsR0FBRyx5QkFBeUIsR0FBRyxxQkFBcUIsR0FBRyxjQUFjLEdBQUcsWUFBWSxHQUFHLHFCQUFxQixHQUFHLG9CQUFvQjtBQUNySiwrQkFBK0IsbUJBQU8sQ0FBQyxzSEFBc0I7QUFDN0QsOENBQTZDLEVBQUUscUNBQXFDLDZDQUE2QyxFQUFDO0FBQ2xJLG9CQUFvQixtQkFBTyxDQUFDLG1HQUE2QjtBQUN6RCxpQkFBaUIsbUJBQU8sQ0FBQyw2RkFBMEI7QUFDbkQsZ0JBQWdCLG1CQUFPLENBQUMsMkZBQXlCO0FBQ2pELGdCQUFnQixtQkFBTyxDQUFDLHdKQUFtQztBQUMzRCxpQ0FBaUMsbUJBQU8sQ0FBQyxrSEFBZ0I7QUFDekQsaUNBQWlDLG1CQUFPLENBQUMsa0hBQWdCO0FBQ3pELDhCQUE4QixtQkFBTyxDQUFDLDRJQUE2QjtBQUNuRSxvQ0FBb0MsbUJBQU8sQ0FBQyxrSkFBNkI7QUFDekUsa0NBQWtDLG1CQUFPLENBQUMsOElBQTJCO0FBQ3JFO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8veHJwbC1zdGFibGVjb2luLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy94cnBsLXNlY3JldC1udW1iZXJzL25vZGVfbW9kdWxlcy9yaXBwbGUta2V5cGFpcnMvZGlzdC9pbmRleC5qcz8yYjIxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWNvZGVTZWVkID0gZXhwb3J0cy5kZXJpdmVOb2RlQWRkcmVzcyA9IGV4cG9ydHMuZGVyaXZlQWRkcmVzcyA9IGV4cG9ydHMudmVyaWZ5ID0gZXhwb3J0cy5zaWduID0gZXhwb3J0cy5kZXJpdmVLZXlwYWlyID0gZXhwb3J0cy5nZW5lcmF0ZVNlZWQgPSB2b2lkIDA7XG5jb25zdCByaXBwbGVfYWRkcmVzc19jb2RlY18xID0gcmVxdWlyZShcInJpcHBsZS1hZGRyZXNzLWNvZGVjXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVjb2RlU2VlZFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcmlwcGxlX2FkZHJlc3NfY29kZWNfMS5kZWNvZGVTZWVkOyB9IH0pO1xuY29uc3QgcmlwZW1kMTYwXzEgPSByZXF1aXJlKFwiQHhycGxmL2lzb21vcnBoaWMvcmlwZW1kMTYwXCIpO1xuY29uc3Qgc2hhMjU2XzEgPSByZXF1aXJlKFwiQHhycGxmL2lzb21vcnBoaWMvc2hhMjU2XCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCJAeHJwbGYvaXNvbW9ycGhpYy91dGlsc1wiKTtcbmNvbnN0IHV0aWxzXzIgPSByZXF1aXJlKFwiLi9zaWduaW5nLXNjaGVtZXMvc2VjcDI1NmsxL3V0aWxzXCIpO1xuY29uc3QgU2hhNTEyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvU2hhNTEyXCIpKTtcbmNvbnN0IGFzc2VydF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2Fzc2VydFwiKSk7XG5jb25zdCBnZXRBbGdvcml0aG1Gcm9tS2V5XzEgPSByZXF1aXJlKFwiLi91dGlscy9nZXRBbGdvcml0aG1Gcm9tS2V5XCIpO1xuY29uc3Qgc2VjcDI1NmsxXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vc2lnbmluZy1zY2hlbWVzL3NlY3AyNTZrMVwiKSk7XG5jb25zdCBlZDI1NTE5XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vc2lnbmluZy1zY2hlbWVzL2VkMjU1MTlcIikpO1xuZnVuY3Rpb24gZ2V0U2lnbmluZ1NjaGVtZShhbGdvcml0aG0pIHtcbiAgICBjb25zdCBzY2hlbWVzID0geyAnZWNkc2Etc2VjcDI1NmsxJzogc2VjcDI1NmsxXzEuZGVmYXVsdCwgZWQyNTUxOTogZWQyNTUxOV8xLmRlZmF1bHQgfTtcbiAgICByZXR1cm4gc2NoZW1lc1thbGdvcml0aG1dO1xufVxuZnVuY3Rpb24gZ2VuZXJhdGVTZWVkKG9wdGlvbnMgPSB7fSkge1xuICAgIGFzc2VydF8xLmRlZmF1bHQub2soIW9wdGlvbnMuZW50cm9weSB8fCBvcHRpb25zLmVudHJvcHkubGVuZ3RoID49IDE2LCAnZW50cm9weSB0b28gc2hvcnQnKTtcbiAgICBjb25zdCBlbnRyb3B5ID0gb3B0aW9ucy5lbnRyb3B5XG4gICAgICAgID8gb3B0aW9ucy5lbnRyb3B5LnNsaWNlKDAsIDE2KVxuICAgICAgICA6ICgwLCB1dGlsc18xLnJhbmRvbUJ5dGVzKSgxNik7XG4gICAgY29uc3QgdHlwZSA9IG9wdGlvbnMuYWxnb3JpdGhtID09PSAnZWQyNTUxOScgPyAnZWQyNTUxOScgOiAnc2VjcDI1NmsxJztcbiAgICByZXR1cm4gKDAsIHJpcHBsZV9hZGRyZXNzX2NvZGVjXzEuZW5jb2RlU2VlZCkoZW50cm9weSwgdHlwZSk7XG59XG5leHBvcnRzLmdlbmVyYXRlU2VlZCA9IGdlbmVyYXRlU2VlZDtcbmZ1bmN0aW9uIGRlcml2ZUtleXBhaXIoc2VlZCwgb3B0aW9ucykge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCBkZWNvZGVkID0gKDAsIHJpcHBsZV9hZGRyZXNzX2NvZGVjXzEuZGVjb2RlU2VlZCkoc2VlZCk7XG4gICAgY29uc3QgcHJvcG9zZWRBbGdvcml0aG0gPSAoX2EgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuYWxnb3JpdGhtKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBkZWNvZGVkLnR5cGU7XG4gICAgY29uc3QgYWxnb3JpdGhtID0gcHJvcG9zZWRBbGdvcml0aG0gPT09ICdlZDI1NTE5JyA/ICdlZDI1NTE5JyA6ICdlY2RzYS1zZWNwMjU2azEnO1xuICAgIGNvbnN0IHNjaGVtZSA9IGdldFNpZ25pbmdTY2hlbWUoYWxnb3JpdGhtKTtcbiAgICBjb25zdCBrZXlwYWlyID0gc2NoZW1lLmRlcml2ZUtleXBhaXIoZGVjb2RlZC5ieXRlcywgb3B0aW9ucyk7XG4gICAgY29uc3QgbWVzc2FnZVRvVmVyaWZ5ID0gU2hhNTEyXzEuZGVmYXVsdC5oYWxmKCdUaGlzIHRlc3QgbWVzc2FnZSBzaG91bGQgdmVyaWZ5LicpO1xuICAgIGNvbnN0IHNpZ25hdHVyZSA9IHNjaGVtZS5zaWduKG1lc3NhZ2VUb1ZlcmlmeSwga2V5cGFpci5wcml2YXRlS2V5KTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIXNjaGVtZS52ZXJpZnkobWVzc2FnZVRvVmVyaWZ5LCBzaWduYXR1cmUsIGtleXBhaXIucHVibGljS2V5KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Rlcml2ZWQga2V5cGFpciBkaWQgbm90IGdlbmVyYXRlIHZlcmlmaWFibGUgc2lnbmF0dXJlJyk7XG4gICAgfVxuICAgIHJldHVybiBrZXlwYWlyO1xufVxuZXhwb3J0cy5kZXJpdmVLZXlwYWlyID0gZGVyaXZlS2V5cGFpcjtcbmZ1bmN0aW9uIHNpZ24obWVzc2FnZUhleCwgcHJpdmF0ZUtleSkge1xuICAgIGNvbnN0IGFsZ29yaXRobSA9ICgwLCBnZXRBbGdvcml0aG1Gcm9tS2V5XzEuZ2V0QWxnb3JpdGhtRnJvbVByaXZhdGVLZXkpKHByaXZhdGVLZXkpO1xuICAgIHJldHVybiBnZXRTaWduaW5nU2NoZW1lKGFsZ29yaXRobSkuc2lnbigoMCwgdXRpbHNfMS5oZXhUb0J5dGVzKShtZXNzYWdlSGV4KSwgcHJpdmF0ZUtleSk7XG59XG5leHBvcnRzLnNpZ24gPSBzaWduO1xuZnVuY3Rpb24gdmVyaWZ5KG1lc3NhZ2VIZXgsIHNpZ25hdHVyZSwgcHVibGljS2V5KSB7XG4gICAgY29uc3QgYWxnb3JpdGhtID0gKDAsIGdldEFsZ29yaXRobUZyb21LZXlfMS5nZXRBbGdvcml0aG1Gcm9tUHVibGljS2V5KShwdWJsaWNLZXkpO1xuICAgIHJldHVybiBnZXRTaWduaW5nU2NoZW1lKGFsZ29yaXRobSkudmVyaWZ5KCgwLCB1dGlsc18xLmhleFRvQnl0ZXMpKG1lc3NhZ2VIZXgpLCBzaWduYXR1cmUsIHB1YmxpY0tleSk7XG59XG5leHBvcnRzLnZlcmlmeSA9IHZlcmlmeTtcbmZ1bmN0aW9uIGNvbXB1dGVQdWJsaWNLZXlIYXNoKHB1YmxpY0tleUJ5dGVzKSB7XG4gICAgcmV0dXJuICgwLCByaXBlbWQxNjBfMS5yaXBlbWQxNjApKCgwLCBzaGEyNTZfMS5zaGEyNTYpKHB1YmxpY0tleUJ5dGVzKSk7XG59XG5mdW5jdGlvbiBkZXJpdmVBZGRyZXNzRnJvbUJ5dGVzKHB1YmxpY0tleUJ5dGVzKSB7XG4gICAgcmV0dXJuICgwLCByaXBwbGVfYWRkcmVzc19jb2RlY18xLmVuY29kZUFjY291bnRJRCkoY29tcHV0ZVB1YmxpY0tleUhhc2gocHVibGljS2V5Qnl0ZXMpKTtcbn1cbmZ1bmN0aW9uIGRlcml2ZUFkZHJlc3MocHVibGljS2V5KSB7XG4gICAgcmV0dXJuIGRlcml2ZUFkZHJlc3NGcm9tQnl0ZXMoKDAsIHV0aWxzXzEuaGV4VG9CeXRlcykocHVibGljS2V5KSk7XG59XG5leHBvcnRzLmRlcml2ZUFkZHJlc3MgPSBkZXJpdmVBZGRyZXNzO1xuZnVuY3Rpb24gZGVyaXZlTm9kZUFkZHJlc3MocHVibGljS2V5KSB7XG4gICAgY29uc3QgZ2VuZXJhdG9yQnl0ZXMgPSAoMCwgcmlwcGxlX2FkZHJlc3NfY29kZWNfMS5kZWNvZGVOb2RlUHVibGljKShwdWJsaWNLZXkpO1xuICAgIGNvbnN0IGFjY291bnRQdWJsaWNCeXRlcyA9ICgwLCB1dGlsc18yLmFjY291bnRQdWJsaWNGcm9tUHVibGljR2VuZXJhdG9yKShnZW5lcmF0b3JCeXRlcyk7XG4gICAgcmV0dXJuIGRlcml2ZUFkZHJlc3NGcm9tQnl0ZXMoYWNjb3VudFB1YmxpY0J5dGVzKTtcbn1cbmV4cG9ydHMuZGVyaXZlTm9kZUFkZHJlc3MgPSBkZXJpdmVOb2RlQWRkcmVzcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xrpl-secret-numbers/node_modules/ripple-keypairs/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xrpl-secret-numbers/node_modules/ripple-keypairs/dist/signing-schemes/ed25519/index.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/xrpl-secret-numbers/node_modules/ripple-keypairs/dist/signing-schemes/ed25519/index.js ***!
  \*************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst ed25519_1 = __webpack_require__(/*! @noble/curves/ed25519 */ \"(ssr)/./node_modules/@noble/curves/ed25519.js\");\nconst utils_1 = __webpack_require__(/*! @xrplf/isomorphic/utils */ \"(ssr)/./node_modules/@xrplf/isomorphic/dist/utils/index.js\");\nconst assert_1 = __importDefault(__webpack_require__(/*! ../../utils/assert */ \"(ssr)/./node_modules/xrpl-secret-numbers/node_modules/ripple-keypairs/dist/utils/assert.js\"));\nconst Sha512_1 = __importDefault(__webpack_require__(/*! ../../utils/Sha512 */ \"(ssr)/./node_modules/xrpl-secret-numbers/node_modules/ripple-keypairs/dist/utils/Sha512.js\"));\nconst ED_PREFIX = 'ED';\nconst ed25519 = {\n    deriveKeypair(entropy) {\n        const rawPrivateKey = Sha512_1.default.half(entropy);\n        const privateKey = ED_PREFIX + (0, utils_1.bytesToHex)(rawPrivateKey);\n        const publicKey = ED_PREFIX + (0, utils_1.bytesToHex)(ed25519_1.ed25519.getPublicKey(rawPrivateKey));\n        return { privateKey, publicKey };\n    },\n    sign(message, privateKey) {\n        assert_1.default.ok(message instanceof Uint8Array, 'message must be array of octets');\n        assert_1.default.ok(privateKey.length === 66, 'private key must be 33 bytes including prefix');\n        return (0, utils_1.bytesToHex)(ed25519_1.ed25519.sign(message, privateKey.slice(2)));\n    },\n    verify(message, signature, publicKey) {\n        // Unlikely to be triggered as these are internal and guarded by getAlgorithmFromKey\n        assert_1.default.ok(publicKey.length === 66, 'public key must be 33 bytes including prefix');\n        return ed25519_1.ed25519.verify(signature, message, \n        // Remove the 0xED prefix\n        publicKey.slice(2), \n        // By default, set zip215 to false for compatibility reasons.\n        // ZIP 215 is a stricter Ed25519 signature verification scheme.\n        // However, setting it to false adheres to the more commonly used\n        // RFC8032 / NIST186-5 standards, making it compatible with systems\n        // like the XRP Ledger.\n        { zip215: false });\n    },\n};\nexports[\"default\"] = ed25519;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHJwbC1zZWNyZXQtbnVtYmVycy9ub2RlX21vZHVsZXMvcmlwcGxlLWtleXBhaXJzL2Rpc3Qvc2lnbmluZy1zY2hlbWVzL2VkMjU1MTkvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQkFBa0IsbUJBQU8sQ0FBQyw0RUFBdUI7QUFDakQsZ0JBQWdCLG1CQUFPLENBQUMsMkZBQXlCO0FBQ2pELGlDQUFpQyxtQkFBTyxDQUFDLHNIQUFvQjtBQUM3RCxpQ0FBaUMsbUJBQU8sQ0FBQyxzSEFBb0I7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxlQUFlO0FBQ3pCLEtBQUs7QUFDTDtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly94cnBsLXN0YWJsZWNvaW4tZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3hycGwtc2VjcmV0LW51bWJlcnMvbm9kZV9tb2R1bGVzL3JpcHBsZS1rZXlwYWlycy9kaXN0L3NpZ25pbmctc2NoZW1lcy9lZDI1NTE5L2luZGV4LmpzPzFkM2YiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBlZDI1NTE5XzEgPSByZXF1aXJlKFwiQG5vYmxlL2N1cnZlcy9lZDI1NTE5XCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCJAeHJwbGYvaXNvbW9ycGhpYy91dGlsc1wiKTtcbmNvbnN0IGFzc2VydF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi91dGlscy9hc3NlcnRcIikpO1xuY29uc3QgU2hhNTEyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uLy4uL3V0aWxzL1NoYTUxMlwiKSk7XG5jb25zdCBFRF9QUkVGSVggPSAnRUQnO1xuY29uc3QgZWQyNTUxOSA9IHtcbiAgICBkZXJpdmVLZXlwYWlyKGVudHJvcHkpIHtcbiAgICAgICAgY29uc3QgcmF3UHJpdmF0ZUtleSA9IFNoYTUxMl8xLmRlZmF1bHQuaGFsZihlbnRyb3B5KTtcbiAgICAgICAgY29uc3QgcHJpdmF0ZUtleSA9IEVEX1BSRUZJWCArICgwLCB1dGlsc18xLmJ5dGVzVG9IZXgpKHJhd1ByaXZhdGVLZXkpO1xuICAgICAgICBjb25zdCBwdWJsaWNLZXkgPSBFRF9QUkVGSVggKyAoMCwgdXRpbHNfMS5ieXRlc1RvSGV4KShlZDI1NTE5XzEuZWQyNTUxOS5nZXRQdWJsaWNLZXkocmF3UHJpdmF0ZUtleSkpO1xuICAgICAgICByZXR1cm4geyBwcml2YXRlS2V5LCBwdWJsaWNLZXkgfTtcbiAgICB9LFxuICAgIHNpZ24obWVzc2FnZSwgcHJpdmF0ZUtleSkge1xuICAgICAgICBhc3NlcnRfMS5kZWZhdWx0Lm9rKG1lc3NhZ2UgaW5zdGFuY2VvZiBVaW50OEFycmF5LCAnbWVzc2FnZSBtdXN0IGJlIGFycmF5IG9mIG9jdGV0cycpO1xuICAgICAgICBhc3NlcnRfMS5kZWZhdWx0Lm9rKHByaXZhdGVLZXkubGVuZ3RoID09PSA2NiwgJ3ByaXZhdGUga2V5IG11c3QgYmUgMzMgYnl0ZXMgaW5jbHVkaW5nIHByZWZpeCcpO1xuICAgICAgICByZXR1cm4gKDAsIHV0aWxzXzEuYnl0ZXNUb0hleCkoZWQyNTUxOV8xLmVkMjU1MTkuc2lnbihtZXNzYWdlLCBwcml2YXRlS2V5LnNsaWNlKDIpKSk7XG4gICAgfSxcbiAgICB2ZXJpZnkobWVzc2FnZSwgc2lnbmF0dXJlLCBwdWJsaWNLZXkpIHtcbiAgICAgICAgLy8gVW5saWtlbHkgdG8gYmUgdHJpZ2dlcmVkIGFzIHRoZXNlIGFyZSBpbnRlcm5hbCBhbmQgZ3VhcmRlZCBieSBnZXRBbGdvcml0aG1Gcm9tS2V5XG4gICAgICAgIGFzc2VydF8xLmRlZmF1bHQub2socHVibGljS2V5Lmxlbmd0aCA9PT0gNjYsICdwdWJsaWMga2V5IG11c3QgYmUgMzMgYnl0ZXMgaW5jbHVkaW5nIHByZWZpeCcpO1xuICAgICAgICByZXR1cm4gZWQyNTUxOV8xLmVkMjU1MTkudmVyaWZ5KHNpZ25hdHVyZSwgbWVzc2FnZSwgXG4gICAgICAgIC8vIFJlbW92ZSB0aGUgMHhFRCBwcmVmaXhcbiAgICAgICAgcHVibGljS2V5LnNsaWNlKDIpLCBcbiAgICAgICAgLy8gQnkgZGVmYXVsdCwgc2V0IHppcDIxNSB0byBmYWxzZSBmb3IgY29tcGF0aWJpbGl0eSByZWFzb25zLlxuICAgICAgICAvLyBaSVAgMjE1IGlzIGEgc3RyaWN0ZXIgRWQyNTUxOSBzaWduYXR1cmUgdmVyaWZpY2F0aW9uIHNjaGVtZS5cbiAgICAgICAgLy8gSG93ZXZlciwgc2V0dGluZyBpdCB0byBmYWxzZSBhZGhlcmVzIHRvIHRoZSBtb3JlIGNvbW1vbmx5IHVzZWRcbiAgICAgICAgLy8gUkZDODAzMiAvIE5JU1QxODYtNSBzdGFuZGFyZHMsIG1ha2luZyBpdCBjb21wYXRpYmxlIHdpdGggc3lzdGVtc1xuICAgICAgICAvLyBsaWtlIHRoZSBYUlAgTGVkZ2VyLlxuICAgICAgICB7IHppcDIxNTogZmFsc2UgfSk7XG4gICAgfSxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBlZDI1NTE5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xrpl-secret-numbers/node_modules/ripple-keypairs/dist/signing-schemes/ed25519/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xrpl-secret-numbers/node_modules/ripple-keypairs/dist/signing-schemes/secp256k1/index.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/xrpl-secret-numbers/node_modules/ripple-keypairs/dist/signing-schemes/secp256k1/index.js ***!
  \***************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst utils_1 = __webpack_require__(/*! @noble/curves/abstract/utils */ \"(ssr)/./node_modules/@noble/curves/abstract/utils.js\");\nconst secp256k1_1 = __webpack_require__(/*! @noble/curves/secp256k1 */ \"(ssr)/./node_modules/@noble/curves/secp256k1.js\");\nconst utils_2 = __webpack_require__(/*! @xrplf/isomorphic/utils */ \"(ssr)/./node_modules/@xrplf/isomorphic/dist/utils/index.js\");\nconst utils_3 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/xrpl-secret-numbers/node_modules/ripple-keypairs/dist/signing-schemes/secp256k1/utils.js\");\nconst assert_1 = __importDefault(__webpack_require__(/*! ../../utils/assert */ \"(ssr)/./node_modules/xrpl-secret-numbers/node_modules/ripple-keypairs/dist/utils/assert.js\"));\nconst Sha512_1 = __importDefault(__webpack_require__(/*! ../../utils/Sha512 */ \"(ssr)/./node_modules/xrpl-secret-numbers/node_modules/ripple-keypairs/dist/utils/Sha512.js\"));\nconst SECP256K1_PREFIX = '00';\nconst secp256k1 = {\n    deriveKeypair(entropy, options) {\n        const derived = (0, utils_3.derivePrivateKey)(entropy, options);\n        const privateKey = SECP256K1_PREFIX + (0, utils_2.bytesToHex)((0, utils_1.numberToBytesBE)(derived, 32));\n        const publicKey = (0, utils_2.bytesToHex)(secp256k1_1.secp256k1.getPublicKey(derived, true));\n        return { privateKey, publicKey };\n    },\n    sign(message, privateKey) {\n        // Some callers pass the privateKey with the prefix, others without.\n        // @noble/curves will throw if the key is not exactly 32 bytes, so we\n        // normalize it before passing to the sign method.\n        assert_1.default.ok((privateKey.length === 66 && privateKey.startsWith(SECP256K1_PREFIX)) ||\n            privateKey.length === 64);\n        const normedPrivateKey = privateKey.length === 66 ? privateKey.slice(2) : privateKey;\n        return secp256k1_1.secp256k1\n            .sign(Sha512_1.default.half(message), normedPrivateKey, {\n            // \"Canonical\" signatures\n            lowS: true,\n            // Would fail tests if signatures aren't deterministic\n            extraEntropy: undefined,\n        })\n            .toDERHex(true)\n            .toUpperCase();\n    },\n    verify(message, signature, publicKey) {\n        const decoded = secp256k1_1.secp256k1.Signature.fromDER(signature);\n        return secp256k1_1.secp256k1.verify(decoded, Sha512_1.default.half(message), publicKey);\n    },\n};\nexports[\"default\"] = secp256k1;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHJwbC1zZWNyZXQtbnVtYmVycy9ub2RlX21vZHVsZXMvcmlwcGxlLWtleXBhaXJzL2Rpc3Qvc2lnbmluZy1zY2hlbWVzL3NlY3AyNTZrMS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdCQUFnQixtQkFBTyxDQUFDLDBGQUE4QjtBQUN0RCxvQkFBb0IsbUJBQU8sQ0FBQyxnRkFBeUI7QUFDckQsZ0JBQWdCLG1CQUFPLENBQUMsMkZBQXlCO0FBQ2pELGdCQUFnQixtQkFBTyxDQUFDLDhIQUFTO0FBQ2pDLGlDQUFpQyxtQkFBTyxDQUFDLHNIQUFvQjtBQUM3RCxpQ0FBaUMsbUJBQU8sQ0FBQyxzSEFBb0I7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly94cnBsLXN0YWJsZWNvaW4tZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3hycGwtc2VjcmV0LW51bWJlcnMvbm9kZV9tb2R1bGVzL3JpcHBsZS1rZXlwYWlycy9kaXN0L3NpZ25pbmctc2NoZW1lcy9zZWNwMjU2azEvaW5kZXguanM/ZjJlOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiQG5vYmxlL2N1cnZlcy9hYnN0cmFjdC91dGlsc1wiKTtcbmNvbnN0IHNlY3AyNTZrMV8xID0gcmVxdWlyZShcIkBub2JsZS9jdXJ2ZXMvc2VjcDI1NmsxXCIpO1xuY29uc3QgdXRpbHNfMiA9IHJlcXVpcmUoXCJAeHJwbGYvaXNvbW9ycGhpYy91dGlsc1wiKTtcbmNvbnN0IHV0aWxzXzMgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbmNvbnN0IGFzc2VydF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi91dGlscy9hc3NlcnRcIikpO1xuY29uc3QgU2hhNTEyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uLy4uL3V0aWxzL1NoYTUxMlwiKSk7XG5jb25zdCBTRUNQMjU2SzFfUFJFRklYID0gJzAwJztcbmNvbnN0IHNlY3AyNTZrMSA9IHtcbiAgICBkZXJpdmVLZXlwYWlyKGVudHJvcHksIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgZGVyaXZlZCA9ICgwLCB1dGlsc18zLmRlcml2ZVByaXZhdGVLZXkpKGVudHJvcHksIG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBwcml2YXRlS2V5ID0gU0VDUDI1NksxX1BSRUZJWCArICgwLCB1dGlsc18yLmJ5dGVzVG9IZXgpKCgwLCB1dGlsc18xLm51bWJlclRvQnl0ZXNCRSkoZGVyaXZlZCwgMzIpKTtcbiAgICAgICAgY29uc3QgcHVibGljS2V5ID0gKDAsIHV0aWxzXzIuYnl0ZXNUb0hleCkoc2VjcDI1NmsxXzEuc2VjcDI1NmsxLmdldFB1YmxpY0tleShkZXJpdmVkLCB0cnVlKSk7XG4gICAgICAgIHJldHVybiB7IHByaXZhdGVLZXksIHB1YmxpY0tleSB9O1xuICAgIH0sXG4gICAgc2lnbihtZXNzYWdlLCBwcml2YXRlS2V5KSB7XG4gICAgICAgIC8vIFNvbWUgY2FsbGVycyBwYXNzIHRoZSBwcml2YXRlS2V5IHdpdGggdGhlIHByZWZpeCwgb3RoZXJzIHdpdGhvdXQuXG4gICAgICAgIC8vIEBub2JsZS9jdXJ2ZXMgd2lsbCB0aHJvdyBpZiB0aGUga2V5IGlzIG5vdCBleGFjdGx5IDMyIGJ5dGVzLCBzbyB3ZVxuICAgICAgICAvLyBub3JtYWxpemUgaXQgYmVmb3JlIHBhc3NpbmcgdG8gdGhlIHNpZ24gbWV0aG9kLlxuICAgICAgICBhc3NlcnRfMS5kZWZhdWx0Lm9rKChwcml2YXRlS2V5Lmxlbmd0aCA9PT0gNjYgJiYgcHJpdmF0ZUtleS5zdGFydHNXaXRoKFNFQ1AyNTZLMV9QUkVGSVgpKSB8fFxuICAgICAgICAgICAgcHJpdmF0ZUtleS5sZW5ndGggPT09IDY0KTtcbiAgICAgICAgY29uc3Qgbm9ybWVkUHJpdmF0ZUtleSA9IHByaXZhdGVLZXkubGVuZ3RoID09PSA2NiA/IHByaXZhdGVLZXkuc2xpY2UoMikgOiBwcml2YXRlS2V5O1xuICAgICAgICByZXR1cm4gc2VjcDI1NmsxXzEuc2VjcDI1NmsxXG4gICAgICAgICAgICAuc2lnbihTaGE1MTJfMS5kZWZhdWx0LmhhbGYobWVzc2FnZSksIG5vcm1lZFByaXZhdGVLZXksIHtcbiAgICAgICAgICAgIC8vIFwiQ2Fub25pY2FsXCIgc2lnbmF0dXJlc1xuICAgICAgICAgICAgbG93UzogdHJ1ZSxcbiAgICAgICAgICAgIC8vIFdvdWxkIGZhaWwgdGVzdHMgaWYgc2lnbmF0dXJlcyBhcmVuJ3QgZGV0ZXJtaW5pc3RpY1xuICAgICAgICAgICAgZXh0cmFFbnRyb3B5OiB1bmRlZmluZWQsXG4gICAgICAgIH0pXG4gICAgICAgICAgICAudG9ERVJIZXgodHJ1ZSlcbiAgICAgICAgICAgIC50b1VwcGVyQ2FzZSgpO1xuICAgIH0sXG4gICAgdmVyaWZ5KG1lc3NhZ2UsIHNpZ25hdHVyZSwgcHVibGljS2V5KSB7XG4gICAgICAgIGNvbnN0IGRlY29kZWQgPSBzZWNwMjU2azFfMS5zZWNwMjU2azEuU2lnbmF0dXJlLmZyb21ERVIoc2lnbmF0dXJlKTtcbiAgICAgICAgcmV0dXJuIHNlY3AyNTZrMV8xLnNlY3AyNTZrMS52ZXJpZnkoZGVjb2RlZCwgU2hhNTEyXzEuZGVmYXVsdC5oYWxmKG1lc3NhZ2UpLCBwdWJsaWNLZXkpO1xuICAgIH0sXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gc2VjcDI1NmsxO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xrpl-secret-numbers/node_modules/ripple-keypairs/dist/signing-schemes/secp256k1/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xrpl-secret-numbers/node_modules/ripple-keypairs/dist/signing-schemes/secp256k1/utils.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/xrpl-secret-numbers/node_modules/ripple-keypairs/dist/signing-schemes/secp256k1/utils.js ***!
  \***************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.accountPublicFromPublicGenerator = exports.derivePrivateKey = void 0;\nconst secp256k1_1 = __webpack_require__(/*! @noble/curves/secp256k1 */ \"(ssr)/./node_modules/@noble/curves/secp256k1.js\");\nconst Sha512_1 = __importDefault(__webpack_require__(/*! ../../utils/Sha512 */ \"(ssr)/./node_modules/xrpl-secret-numbers/node_modules/ripple-keypairs/dist/utils/Sha512.js\"));\nconst ZERO = BigInt(0);\nfunction deriveScalar(bytes, discrim) {\n    const order = secp256k1_1.secp256k1.CURVE.n;\n    for (let i = 0; i <= 4294967295; i++) {\n        // We hash the bytes to find a 256-bit number, looping until we are sure it\n        // is less than the order of the curve.\n        const hasher = new Sha512_1.default().add(bytes);\n        // If the optional discriminator index was passed in, update the hash.\n        if (discrim !== undefined) {\n            hasher.addU32(discrim);\n        }\n        hasher.addU32(i);\n        const key = hasher.first256BigInt();\n        /* istanbul ignore else */\n        if (key > ZERO && key < order) {\n            return key;\n        }\n    }\n    // This error is practically impossible to reach.\n    // The order of the curve describes the (finite) amount of points on the curve\n    // https://github.com/indutny/elliptic/blob/master/lib/elliptic/curves.js#L182\n    // How often will an (essentially) random number generated by Sha512 be larger than that?\n    // There's 2^32 chances (the for loop) to get a number smaller than the order,\n    // and it's rare that you'll even get past the first loop iteration.\n    // Note that in TypeScript we actually need the throw, otherwise the function signature would be bigint | undefined\n    //\n    /* istanbul ignore next */\n    throw new Error('impossible unicorn ;)');\n}\n/**\n * @param seed - Bytes.\n * @param [opts] - Object.\n * @param [opts.accountIndex=0] - The account number to generate.\n * @param [opts.validator=false] - Generate root key-pair,\n *                                              as used by validators.\n * @returns {bigint} 256 bit scalar value.\n *\n */\nfunction derivePrivateKey(seed, opts = {}) {\n    const root = opts.validator;\n    const order = secp256k1_1.secp256k1.CURVE.n;\n    // This private generator represents the `root` private key, and is what's\n    // used by validators for signing when a keypair is generated from a seed.\n    const privateGen = deriveScalar(seed);\n    if (root) {\n        // As returned by validation_create for a given seed\n        return privateGen;\n    }\n    const publicGen = secp256k1_1.secp256k1.ProjectivePoint.BASE.multiply(privateGen).toRawBytes(true);\n    // A seed can generate many keypairs as a function of the seed and a uint32.\n    // Almost everyone just uses the first account, `0`.\n    const accountIndex = opts.accountIndex || 0;\n    return (deriveScalar(publicGen, accountIndex) + privateGen) % order;\n}\nexports.derivePrivateKey = derivePrivateKey;\nfunction accountPublicFromPublicGenerator(publicGenBytes) {\n    const rootPubPoint = secp256k1_1.secp256k1.ProjectivePoint.fromHex(publicGenBytes);\n    const scalar = deriveScalar(publicGenBytes, 0);\n    const point = secp256k1_1.secp256k1.ProjectivePoint.BASE.multiply(scalar);\n    const offset = rootPubPoint.add(point);\n    return offset.toRawBytes(true);\n}\nexports.accountPublicFromPublicGenerator = accountPublicFromPublicGenerator;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHJwbC1zZWNyZXQtbnVtYmVycy9ub2RlX21vZHVsZXMvcmlwcGxlLWtleXBhaXJzL2Rpc3Qvc2lnbmluZy1zY2hlbWVzL3NlY3AyNTZrMS91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdDQUF3QyxHQUFHLHdCQUF3QjtBQUNuRSxvQkFBb0IsbUJBQU8sQ0FBQyxnRkFBeUI7QUFDckQsaUNBQWlDLG1CQUFPLENBQUMsc0hBQW9CO0FBQzdEO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixpQkFBaUI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QztBQUN4QyIsInNvdXJjZXMiOlsid2VicGFjazovL3hycGwtc3RhYmxlY29pbi1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMveHJwbC1zZWNyZXQtbnVtYmVycy9ub2RlX21vZHVsZXMvcmlwcGxlLWtleXBhaXJzL2Rpc3Qvc2lnbmluZy1zY2hlbWVzL3NlY3AyNTZrMS91dGlscy5qcz8xZmRiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hY2NvdW50UHVibGljRnJvbVB1YmxpY0dlbmVyYXRvciA9IGV4cG9ydHMuZGVyaXZlUHJpdmF0ZUtleSA9IHZvaWQgMDtcbmNvbnN0IHNlY3AyNTZrMV8xID0gcmVxdWlyZShcIkBub2JsZS9jdXJ2ZXMvc2VjcDI1NmsxXCIpO1xuY29uc3QgU2hhNTEyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uLy4uL3V0aWxzL1NoYTUxMlwiKSk7XG5jb25zdCBaRVJPID0gQmlnSW50KDApO1xuZnVuY3Rpb24gZGVyaXZlU2NhbGFyKGJ5dGVzLCBkaXNjcmltKSB7XG4gICAgY29uc3Qgb3JkZXIgPSBzZWNwMjU2azFfMS5zZWNwMjU2azEuQ1VSVkUubjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8PSA0Mjk0OTY3Mjk1OyBpKyspIHtcbiAgICAgICAgLy8gV2UgaGFzaCB0aGUgYnl0ZXMgdG8gZmluZCBhIDI1Ni1iaXQgbnVtYmVyLCBsb29waW5nIHVudGlsIHdlIGFyZSBzdXJlIGl0XG4gICAgICAgIC8vIGlzIGxlc3MgdGhhbiB0aGUgb3JkZXIgb2YgdGhlIGN1cnZlLlxuICAgICAgICBjb25zdCBoYXNoZXIgPSBuZXcgU2hhNTEyXzEuZGVmYXVsdCgpLmFkZChieXRlcyk7XG4gICAgICAgIC8vIElmIHRoZSBvcHRpb25hbCBkaXNjcmltaW5hdG9yIGluZGV4IHdhcyBwYXNzZWQgaW4sIHVwZGF0ZSB0aGUgaGFzaC5cbiAgICAgICAgaWYgKGRpc2NyaW0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGFzaGVyLmFkZFUzMihkaXNjcmltKTtcbiAgICAgICAgfVxuICAgICAgICBoYXNoZXIuYWRkVTMyKGkpO1xuICAgICAgICBjb25zdCBrZXkgPSBoYXNoZXIuZmlyc3QyNTZCaWdJbnQoKTtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgICAgaWYgKGtleSA+IFpFUk8gJiYga2V5IDwgb3JkZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gVGhpcyBlcnJvciBpcyBwcmFjdGljYWxseSBpbXBvc3NpYmxlIHRvIHJlYWNoLlxuICAgIC8vIFRoZSBvcmRlciBvZiB0aGUgY3VydmUgZGVzY3JpYmVzIHRoZSAoZmluaXRlKSBhbW91bnQgb2YgcG9pbnRzIG9uIHRoZSBjdXJ2ZVxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L2VsbGlwdGljL2Jsb2IvbWFzdGVyL2xpYi9lbGxpcHRpYy9jdXJ2ZXMuanMjTDE4MlxuICAgIC8vIEhvdyBvZnRlbiB3aWxsIGFuIChlc3NlbnRpYWxseSkgcmFuZG9tIG51bWJlciBnZW5lcmF0ZWQgYnkgU2hhNTEyIGJlIGxhcmdlciB0aGFuIHRoYXQ/XG4gICAgLy8gVGhlcmUncyAyXjMyIGNoYW5jZXMgKHRoZSBmb3IgbG9vcCkgdG8gZ2V0IGEgbnVtYmVyIHNtYWxsZXIgdGhhbiB0aGUgb3JkZXIsXG4gICAgLy8gYW5kIGl0J3MgcmFyZSB0aGF0IHlvdSdsbCBldmVuIGdldCBwYXN0IHRoZSBmaXJzdCBsb29wIGl0ZXJhdGlvbi5cbiAgICAvLyBOb3RlIHRoYXQgaW4gVHlwZVNjcmlwdCB3ZSBhY3R1YWxseSBuZWVkIHRoZSB0aHJvdywgb3RoZXJ3aXNlIHRoZSBmdW5jdGlvbiBzaWduYXR1cmUgd291bGQgYmUgYmlnaW50IHwgdW5kZWZpbmVkXG4gICAgLy9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHRocm93IG5ldyBFcnJvcignaW1wb3NzaWJsZSB1bmljb3JuIDspJyk7XG59XG4vKipcbiAqIEBwYXJhbSBzZWVkIC0gQnl0ZXMuXG4gKiBAcGFyYW0gW29wdHNdIC0gT2JqZWN0LlxuICogQHBhcmFtIFtvcHRzLmFjY291bnRJbmRleD0wXSAtIFRoZSBhY2NvdW50IG51bWJlciB0byBnZW5lcmF0ZS5cbiAqIEBwYXJhbSBbb3B0cy52YWxpZGF0b3I9ZmFsc2VdIC0gR2VuZXJhdGUgcm9vdCBrZXktcGFpcixcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzIHVzZWQgYnkgdmFsaWRhdG9ycy5cbiAqIEByZXR1cm5zIHtiaWdpbnR9IDI1NiBiaXQgc2NhbGFyIHZhbHVlLlxuICpcbiAqL1xuZnVuY3Rpb24gZGVyaXZlUHJpdmF0ZUtleShzZWVkLCBvcHRzID0ge30pIHtcbiAgICBjb25zdCByb290ID0gb3B0cy52YWxpZGF0b3I7XG4gICAgY29uc3Qgb3JkZXIgPSBzZWNwMjU2azFfMS5zZWNwMjU2azEuQ1VSVkUubjtcbiAgICAvLyBUaGlzIHByaXZhdGUgZ2VuZXJhdG9yIHJlcHJlc2VudHMgdGhlIGByb290YCBwcml2YXRlIGtleSwgYW5kIGlzIHdoYXQnc1xuICAgIC8vIHVzZWQgYnkgdmFsaWRhdG9ycyBmb3Igc2lnbmluZyB3aGVuIGEga2V5cGFpciBpcyBnZW5lcmF0ZWQgZnJvbSBhIHNlZWQuXG4gICAgY29uc3QgcHJpdmF0ZUdlbiA9IGRlcml2ZVNjYWxhcihzZWVkKTtcbiAgICBpZiAocm9vdCkge1xuICAgICAgICAvLyBBcyByZXR1cm5lZCBieSB2YWxpZGF0aW9uX2NyZWF0ZSBmb3IgYSBnaXZlbiBzZWVkXG4gICAgICAgIHJldHVybiBwcml2YXRlR2VuO1xuICAgIH1cbiAgICBjb25zdCBwdWJsaWNHZW4gPSBzZWNwMjU2azFfMS5zZWNwMjU2azEuUHJvamVjdGl2ZVBvaW50LkJBU0UubXVsdGlwbHkocHJpdmF0ZUdlbikudG9SYXdCeXRlcyh0cnVlKTtcbiAgICAvLyBBIHNlZWQgY2FuIGdlbmVyYXRlIG1hbnkga2V5cGFpcnMgYXMgYSBmdW5jdGlvbiBvZiB0aGUgc2VlZCBhbmQgYSB1aW50MzIuXG4gICAgLy8gQWxtb3N0IGV2ZXJ5b25lIGp1c3QgdXNlcyB0aGUgZmlyc3QgYWNjb3VudCwgYDBgLlxuICAgIGNvbnN0IGFjY291bnRJbmRleCA9IG9wdHMuYWNjb3VudEluZGV4IHx8IDA7XG4gICAgcmV0dXJuIChkZXJpdmVTY2FsYXIocHVibGljR2VuLCBhY2NvdW50SW5kZXgpICsgcHJpdmF0ZUdlbikgJSBvcmRlcjtcbn1cbmV4cG9ydHMuZGVyaXZlUHJpdmF0ZUtleSA9IGRlcml2ZVByaXZhdGVLZXk7XG5mdW5jdGlvbiBhY2NvdW50UHVibGljRnJvbVB1YmxpY0dlbmVyYXRvcihwdWJsaWNHZW5CeXRlcykge1xuICAgIGNvbnN0IHJvb3RQdWJQb2ludCA9IHNlY3AyNTZrMV8xLnNlY3AyNTZrMS5Qcm9qZWN0aXZlUG9pbnQuZnJvbUhleChwdWJsaWNHZW5CeXRlcyk7XG4gICAgY29uc3Qgc2NhbGFyID0gZGVyaXZlU2NhbGFyKHB1YmxpY0dlbkJ5dGVzLCAwKTtcbiAgICBjb25zdCBwb2ludCA9IHNlY3AyNTZrMV8xLnNlY3AyNTZrMS5Qcm9qZWN0aXZlUG9pbnQuQkFTRS5tdWx0aXBseShzY2FsYXIpO1xuICAgIGNvbnN0IG9mZnNldCA9IHJvb3RQdWJQb2ludC5hZGQocG9pbnQpO1xuICAgIHJldHVybiBvZmZzZXQudG9SYXdCeXRlcyh0cnVlKTtcbn1cbmV4cG9ydHMuYWNjb3VudFB1YmxpY0Zyb21QdWJsaWNHZW5lcmF0b3IgPSBhY2NvdW50UHVibGljRnJvbVB1YmxpY0dlbmVyYXRvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xrpl-secret-numbers/node_modules/ripple-keypairs/dist/signing-schemes/secp256k1/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xrpl-secret-numbers/node_modules/ripple-keypairs/dist/utils/Sha512.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/xrpl-secret-numbers/node_modules/ripple-keypairs/dist/utils/Sha512.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst sha512_1 = __webpack_require__(/*! @xrplf/isomorphic/sha512 */ \"(ssr)/./node_modules/@xrplf/isomorphic/dist/sha512/index.js\");\nconst utils_1 = __webpack_require__(/*! @noble/curves/abstract/utils */ \"(ssr)/./node_modules/@noble/curves/abstract/utils.js\");\nclass Sha512 {\n    constructor() {\n        // instantiate empty sha512 hash\n        this.hash = sha512_1.sha512.create();\n    }\n    static half(input) {\n        return new Sha512().add(input).first256();\n    }\n    add(bytes) {\n        this.hash.update(bytes);\n        return this;\n    }\n    addU32(i) {\n        const buffer = new Uint8Array(4);\n        new DataView(buffer.buffer).setUint32(0, i);\n        return this.add(buffer);\n    }\n    finish() {\n        return this.hash.digest();\n    }\n    first256() {\n        return this.finish().slice(0, 32);\n    }\n    first256BigInt() {\n        return (0, utils_1.bytesToNumberBE)(this.first256());\n    }\n}\nexports[\"default\"] = Sha512;\n//# sourceMappingURL=Sha512.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHJwbC1zZWNyZXQtbnVtYmVycy9ub2RlX21vZHVsZXMvcmlwcGxlLWtleXBhaXJzL2Rpc3QvdXRpbHMvU2hhNTEyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlCQUFpQixtQkFBTyxDQUFDLDZGQUEwQjtBQUNuRCxnQkFBZ0IsbUJBQU8sQ0FBQywwRkFBOEI7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL3hycGwtc3RhYmxlY29pbi1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMveHJwbC1zZWNyZXQtbnVtYmVycy9ub2RlX21vZHVsZXMvcmlwcGxlLWtleXBhaXJzL2Rpc3QvdXRpbHMvU2hhNTEyLmpzPzk2MzYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBzaGE1MTJfMSA9IHJlcXVpcmUoXCJAeHJwbGYvaXNvbW9ycGhpYy9zaGE1MTJcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIkBub2JsZS9jdXJ2ZXMvYWJzdHJhY3QvdXRpbHNcIik7XG5jbGFzcyBTaGE1MTIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvLyBpbnN0YW50aWF0ZSBlbXB0eSBzaGE1MTIgaGFzaFxuICAgICAgICB0aGlzLmhhc2ggPSBzaGE1MTJfMS5zaGE1MTIuY3JlYXRlKCk7XG4gICAgfVxuICAgIHN0YXRpYyBoYWxmKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBuZXcgU2hhNTEyKCkuYWRkKGlucHV0KS5maXJzdDI1NigpO1xuICAgIH1cbiAgICBhZGQoYnl0ZXMpIHtcbiAgICAgICAgdGhpcy5oYXNoLnVwZGF0ZShieXRlcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBhZGRVMzIoaSkge1xuICAgICAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheSg0KTtcbiAgICAgICAgbmV3IERhdGFWaWV3KGJ1ZmZlci5idWZmZXIpLnNldFVpbnQzMigwLCBpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkKGJ1ZmZlcik7XG4gICAgfVxuICAgIGZpbmlzaCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzaC5kaWdlc3QoKTtcbiAgICB9XG4gICAgZmlyc3QyNTYoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbmlzaCgpLnNsaWNlKDAsIDMyKTtcbiAgICB9XG4gICAgZmlyc3QyNTZCaWdJbnQoKSB7XG4gICAgICAgIHJldHVybiAoMCwgdXRpbHNfMS5ieXRlc1RvTnVtYmVyQkUpKHRoaXMuZmlyc3QyNTYoKSk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gU2hhNTEyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2hhNTEyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xrpl-secret-numbers/node_modules/ripple-keypairs/dist/utils/Sha512.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xrpl-secret-numbers/node_modules/ripple-keypairs/dist/utils/assert.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/xrpl-secret-numbers/node_modules/ripple-keypairs/dist/utils/assert.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst assertHelper = {\n    ok(cond, message) {\n        if (!cond) {\n            throw new Error(message);\n        }\n    },\n};\nexports[\"default\"] = assertHelper;\n//# sourceMappingURL=assert.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHJwbC1zZWNyZXQtbnVtYmVycy9ub2RlX21vZHVsZXMvcmlwcGxlLWtleXBhaXJzL2Rpc3QvdXRpbHMvYXNzZXJ0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8veHJwbC1zdGFibGVjb2luLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy94cnBsLXNlY3JldC1udW1iZXJzL25vZGVfbW9kdWxlcy9yaXBwbGUta2V5cGFpcnMvZGlzdC91dGlscy9hc3NlcnQuanM/MWU4NyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGFzc2VydEhlbHBlciA9IHtcbiAgICBvayhjb25kLCBtZXNzYWdlKSB7XG4gICAgICAgIGlmICghY29uZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfSxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBhc3NlcnRIZWxwZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc3NlcnQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xrpl-secret-numbers/node_modules/ripple-keypairs/dist/utils/assert.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xrpl-secret-numbers/node_modules/ripple-keypairs/dist/utils/getAlgorithmFromKey.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/xrpl-secret-numbers/node_modules/ripple-keypairs/dist/utils/getAlgorithmFromKey.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getAlgorithmFromPrivateKey = exports.getAlgorithmFromPublicKey = exports.getAlgorithmFromKey = void 0;\nvar Prefix;\n(function (Prefix) {\n    Prefix[Prefix[\"NONE\"] = -1] = \"NONE\";\n    Prefix[Prefix[\"ED25519\"] = 237] = \"ED25519\";\n    Prefix[Prefix[\"SECP256K1_PUB_X\"] = 2] = \"SECP256K1_PUB_X\";\n    Prefix[Prefix[\"SECP256K1_PUB_X_ODD_Y\"] = 3] = \"SECP256K1_PUB_X_ODD_Y\";\n    Prefix[Prefix[\"SECP256K1_PUB_XY\"] = 4] = \"SECP256K1_PUB_XY\";\n    Prefix[Prefix[\"SECP256K1_PRIVATE\"] = 0] = \"SECP256K1_PRIVATE\";\n})(Prefix || (Prefix = {}));\n/**\n * | Curve     | Type        | Prefix | Length | Description                                           | Algorithm       |\n * |-----------|-------------|:------:|:------:|-------------------------------------------------------|----------------:|\n * | ed25519   | Private     |  0xED  |   33   | prefix + Uint256LE (0 < n < order )                   |         ed25519 |\n * | ed25519   | Public      |  0xED  |   33   | prefix + 32 y-bytes                                   |         ed25519 |\n * | secp256k1 | Public (1)  |  0x02  |   33   | prefix + 32 x-bytes                                   | ecdsa-secp256k1 |\n * | secp256k1 | Public (2)  |  0x03  |   33   | prefix + 32 x-bytes (y is odd)                        | ecdsa-secp256k1 |\n * | secp256k1 | Public (3)  |  0x04  |   65   | prefix + 32 x-bytes + 32 y-bytes                      | ecdsa-secp256k1 |\n * | secp256k1 | Private (1) |  None  |   32   | Uint256BE (0 < n < order)                             | ecdsa-secp256k1 |\n * | secp256k1 | Private (2) |  0x00  |   33   | prefix + Uint256BE (0 < n < order)                    | ecdsa-secp256k1 |\n *\n * Note: The 0x00 prefix for secpk256k1 Private (2) essentially 0 pads the number\n *       and the interpreted number is the same as 32 bytes.\n */\nconst KEY_TYPES = {\n    [`private_${Prefix.NONE}_32`]: 'ecdsa-secp256k1',\n    [`private_${Prefix.SECP256K1_PRIVATE}_33`]: 'ecdsa-secp256k1',\n    [`private_${Prefix.ED25519}_33`]: 'ed25519',\n    [`public_${Prefix.ED25519}_33`]: 'ed25519',\n    [`public_${Prefix.SECP256K1_PUB_X}_33`]: 'ecdsa-secp256k1',\n    [`public_${Prefix.SECP256K1_PUB_X_ODD_Y}_33`]: 'ecdsa-secp256k1',\n    [`public_${Prefix.SECP256K1_PUB_XY}_65`]: 'ecdsa-secp256k1',\n};\nfunction getKeyInfo(key) {\n    return {\n        prefix: key.length < 2 ? Prefix.NONE : parseInt(key.slice(0, 2), 16),\n        len: key.length / 2,\n    };\n}\nfunction prefixRepr(prefix) {\n    return prefix === Prefix.NONE\n        ? 'None'\n        : `0x${prefix.toString(16).padStart(2, '0')}`;\n}\nfunction getValidFormatsTable(type) {\n    // No need overkill with renderTable method\n    const padding = 2;\n    const colWidth = {\n        algorithm: 'ecdsa-secp256k1'.length + padding,\n        prefix: '0x00'.length + padding,\n    };\n    return Object.entries(KEY_TYPES)\n        .filter(([key]) => key.startsWith(type))\n        .map(([key, algorithm]) => {\n        const [, prefix, length] = key.split('_');\n        const paddedAlgo = algorithm.padEnd(colWidth.algorithm);\n        const paddedPrefix = prefixRepr(Number(prefix)).padEnd(colWidth.prefix);\n        return `${paddedAlgo} - Prefix: ${paddedPrefix} Length: ${length} bytes`;\n    })\n        .join('\\n');\n}\nfunction keyError({ key, type, prefix, len, }) {\n    const validFormats = getValidFormatsTable(type);\n    return `invalid_key:\n\nType: ${type}\nKey: ${key}\nPrefix: ${prefixRepr(prefix)} \nLength: ${len} bytes\n\nAcceptable ${type} formats are:\n${validFormats}\n`;\n}\n/**\n * Determines the algorithm associated with a given key (public/private).\n *\n * @param key - hexadecimal string representation of the key.\n * @param type - whether expected key is public or private\n * @returns Algorithm algorithm for signing/verifying\n * @throws Error when key is invalid\n */\nfunction getAlgorithmFromKey(key, type) {\n    const { prefix, len } = getKeyInfo(key);\n    // Special case back compat support for no prefix\n    const usedPrefix = type === 'private' && len === 32 ? Prefix.NONE : prefix;\n    const algorithm = KEY_TYPES[`${type}_${usedPrefix}_${len}`];\n    if (!algorithm) {\n        throw new Error(keyError({ key, type, len, prefix: usedPrefix }));\n    }\n    return algorithm;\n}\nexports.getAlgorithmFromKey = getAlgorithmFromKey;\nfunction getAlgorithmFromPublicKey(key) {\n    return getAlgorithmFromKey(key, 'public');\n}\nexports.getAlgorithmFromPublicKey = getAlgorithmFromPublicKey;\nfunction getAlgorithmFromPrivateKey(key) {\n    return getAlgorithmFromKey(key, 'private');\n}\nexports.getAlgorithmFromPrivateKey = getAlgorithmFromPrivateKey;\n//# sourceMappingURL=getAlgorithmFromKey.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHJwbC1zZWNyZXQtbnVtYmVycy9ub2RlX21vZHVsZXMvcmlwcGxlLWtleXBhaXJzL2Rpc3QvdXRpbHMvZ2V0QWxnb3JpdGhtRnJvbUtleS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQ0FBa0MsR0FBRyxpQ0FBaUMsR0FBRywyQkFBMkI7QUFDcEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsd0JBQXdCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixZQUFZO0FBQzVCLGdCQUFnQix5QkFBeUI7QUFDekMsZ0JBQWdCLGVBQWU7QUFDL0IsZUFBZSxlQUFlO0FBQzlCLGVBQWUsdUJBQXVCO0FBQ3RDLGVBQWUsNkJBQTZCO0FBQzVDLGVBQWUsd0JBQXdCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxxQ0FBcUM7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixZQUFZLFlBQVksY0FBYyxVQUFVLFFBQVE7QUFDMUUsS0FBSztBQUNMO0FBQ0E7QUFDQSxvQkFBb0IseUJBQXlCO0FBQzdDO0FBQ0E7O0FBRUEsUUFBUTtBQUNSLE9BQU87QUFDUCxVQUFVO0FBQ1YsVUFBVSxLQUFLOztBQUVmLGFBQWEsTUFBTTtBQUNuQixFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksY0FBYztBQUMxQjtBQUNBO0FBQ0EsbUNBQW1DLEtBQUssR0FBRyxXQUFXLEdBQUcsSUFBSTtBQUM3RDtBQUNBLG1DQUFtQyxvQ0FBb0M7QUFDdkU7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly94cnBsLXN0YWJsZWNvaW4tZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3hycGwtc2VjcmV0LW51bWJlcnMvbm9kZV9tb2R1bGVzL3JpcHBsZS1rZXlwYWlycy9kaXN0L3V0aWxzL2dldEFsZ29yaXRobUZyb21LZXkuanM/OTlhZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0QWxnb3JpdGhtRnJvbVByaXZhdGVLZXkgPSBleHBvcnRzLmdldEFsZ29yaXRobUZyb21QdWJsaWNLZXkgPSBleHBvcnRzLmdldEFsZ29yaXRobUZyb21LZXkgPSB2b2lkIDA7XG52YXIgUHJlZml4O1xuKGZ1bmN0aW9uIChQcmVmaXgpIHtcbiAgICBQcmVmaXhbUHJlZml4W1wiTk9ORVwiXSA9IC0xXSA9IFwiTk9ORVwiO1xuICAgIFByZWZpeFtQcmVmaXhbXCJFRDI1NTE5XCJdID0gMjM3XSA9IFwiRUQyNTUxOVwiO1xuICAgIFByZWZpeFtQcmVmaXhbXCJTRUNQMjU2SzFfUFVCX1hcIl0gPSAyXSA9IFwiU0VDUDI1NksxX1BVQl9YXCI7XG4gICAgUHJlZml4W1ByZWZpeFtcIlNFQ1AyNTZLMV9QVUJfWF9PRERfWVwiXSA9IDNdID0gXCJTRUNQMjU2SzFfUFVCX1hfT0REX1lcIjtcbiAgICBQcmVmaXhbUHJlZml4W1wiU0VDUDI1NksxX1BVQl9YWVwiXSA9IDRdID0gXCJTRUNQMjU2SzFfUFVCX1hZXCI7XG4gICAgUHJlZml4W1ByZWZpeFtcIlNFQ1AyNTZLMV9QUklWQVRFXCJdID0gMF0gPSBcIlNFQ1AyNTZLMV9QUklWQVRFXCI7XG59KShQcmVmaXggfHwgKFByZWZpeCA9IHt9KSk7XG4vKipcbiAqIHwgQ3VydmUgICAgIHwgVHlwZSAgICAgICAgfCBQcmVmaXggfCBMZW5ndGggfCBEZXNjcmlwdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEFsZ29yaXRobSAgICAgICB8XG4gKiB8LS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLXw6LS0tLS0tOnw6LS0tLS0tOnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS06fFxuICogfCBlZDI1NTE5ICAgfCBQcml2YXRlICAgICB8ICAweEVEICB8ICAgMzMgICB8IHByZWZpeCArIFVpbnQyNTZMRSAoMCA8IG4gPCBvcmRlciApICAgICAgICAgICAgICAgICAgIHwgICAgICAgICBlZDI1NTE5IHxcbiAqIHwgZWQyNTUxOSAgIHwgUHVibGljICAgICAgfCAgMHhFRCAgfCAgIDMzICAgfCBwcmVmaXggKyAzMiB5LWJ5dGVzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgICAgZWQyNTUxOSB8XG4gKiB8IHNlY3AyNTZrMSB8IFB1YmxpYyAoMSkgIHwgIDB4MDIgIHwgICAzMyAgIHwgcHJlZml4ICsgMzIgeC1ieXRlcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlY2RzYS1zZWNwMjU2azEgfFxuICogfCBzZWNwMjU2azEgfCBQdWJsaWMgKDIpICB8ICAweDAzICB8ICAgMzMgICB8IHByZWZpeCArIDMyIHgtYnl0ZXMgKHkgaXMgb2RkKSAgICAgICAgICAgICAgICAgICAgICAgIHwgZWNkc2Etc2VjcDI1NmsxIHxcbiAqIHwgc2VjcDI1NmsxIHwgUHVibGljICgzKSAgfCAgMHgwNCAgfCAgIDY1ICAgfCBwcmVmaXggKyAzMiB4LWJ5dGVzICsgMzIgeS1ieXRlcyAgICAgICAgICAgICAgICAgICAgICB8IGVjZHNhLXNlY3AyNTZrMSB8XG4gKiB8IHNlY3AyNTZrMSB8IFByaXZhdGUgKDEpIHwgIE5vbmUgIHwgICAzMiAgIHwgVWludDI1NkJFICgwIDwgbiA8IG9yZGVyKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlY2RzYS1zZWNwMjU2azEgfFxuICogfCBzZWNwMjU2azEgfCBQcml2YXRlICgyKSB8ICAweDAwICB8ICAgMzMgICB8IHByZWZpeCArIFVpbnQyNTZCRSAoMCA8IG4gPCBvcmRlcikgICAgICAgICAgICAgICAgICAgIHwgZWNkc2Etc2VjcDI1NmsxIHxcbiAqXG4gKiBOb3RlOiBUaGUgMHgwMCBwcmVmaXggZm9yIHNlY3BrMjU2azEgUHJpdmF0ZSAoMikgZXNzZW50aWFsbHkgMCBwYWRzIHRoZSBudW1iZXJcbiAqICAgICAgIGFuZCB0aGUgaW50ZXJwcmV0ZWQgbnVtYmVyIGlzIHRoZSBzYW1lIGFzIDMyIGJ5dGVzLlxuICovXG5jb25zdCBLRVlfVFlQRVMgPSB7XG4gICAgW2Bwcml2YXRlXyR7UHJlZml4Lk5PTkV9XzMyYF06ICdlY2RzYS1zZWNwMjU2azEnLFxuICAgIFtgcHJpdmF0ZV8ke1ByZWZpeC5TRUNQMjU2SzFfUFJJVkFURX1fMzNgXTogJ2VjZHNhLXNlY3AyNTZrMScsXG4gICAgW2Bwcml2YXRlXyR7UHJlZml4LkVEMjU1MTl9XzMzYF06ICdlZDI1NTE5JyxcbiAgICBbYHB1YmxpY18ke1ByZWZpeC5FRDI1NTE5fV8zM2BdOiAnZWQyNTUxOScsXG4gICAgW2BwdWJsaWNfJHtQcmVmaXguU0VDUDI1NksxX1BVQl9YfV8zM2BdOiAnZWNkc2Etc2VjcDI1NmsxJyxcbiAgICBbYHB1YmxpY18ke1ByZWZpeC5TRUNQMjU2SzFfUFVCX1hfT0REX1l9XzMzYF06ICdlY2RzYS1zZWNwMjU2azEnLFxuICAgIFtgcHVibGljXyR7UHJlZml4LlNFQ1AyNTZLMV9QVUJfWFl9XzY1YF06ICdlY2RzYS1zZWNwMjU2azEnLFxufTtcbmZ1bmN0aW9uIGdldEtleUluZm8oa2V5KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcHJlZml4OiBrZXkubGVuZ3RoIDwgMiA/IFByZWZpeC5OT05FIDogcGFyc2VJbnQoa2V5LnNsaWNlKDAsIDIpLCAxNiksXG4gICAgICAgIGxlbjoga2V5Lmxlbmd0aCAvIDIsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHByZWZpeFJlcHIocHJlZml4KSB7XG4gICAgcmV0dXJuIHByZWZpeCA9PT0gUHJlZml4Lk5PTkVcbiAgICAgICAgPyAnTm9uZSdcbiAgICAgICAgOiBgMHgke3ByZWZpeC50b1N0cmluZygxNikucGFkU3RhcnQoMiwgJzAnKX1gO1xufVxuZnVuY3Rpb24gZ2V0VmFsaWRGb3JtYXRzVGFibGUodHlwZSkge1xuICAgIC8vIE5vIG5lZWQgb3ZlcmtpbGwgd2l0aCByZW5kZXJUYWJsZSBtZXRob2RcbiAgICBjb25zdCBwYWRkaW5nID0gMjtcbiAgICBjb25zdCBjb2xXaWR0aCA9IHtcbiAgICAgICAgYWxnb3JpdGhtOiAnZWNkc2Etc2VjcDI1NmsxJy5sZW5ndGggKyBwYWRkaW5nLFxuICAgICAgICBwcmVmaXg6ICcweDAwJy5sZW5ndGggKyBwYWRkaW5nLFxuICAgIH07XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKEtFWV9UWVBFUylcbiAgICAgICAgLmZpbHRlcigoW2tleV0pID0+IGtleS5zdGFydHNXaXRoKHR5cGUpKVxuICAgICAgICAubWFwKChba2V5LCBhbGdvcml0aG1dKSA9PiB7XG4gICAgICAgIGNvbnN0IFssIHByZWZpeCwgbGVuZ3RoXSA9IGtleS5zcGxpdCgnXycpO1xuICAgICAgICBjb25zdCBwYWRkZWRBbGdvID0gYWxnb3JpdGhtLnBhZEVuZChjb2xXaWR0aC5hbGdvcml0aG0pO1xuICAgICAgICBjb25zdCBwYWRkZWRQcmVmaXggPSBwcmVmaXhSZXByKE51bWJlcihwcmVmaXgpKS5wYWRFbmQoY29sV2lkdGgucHJlZml4KTtcbiAgICAgICAgcmV0dXJuIGAke3BhZGRlZEFsZ299IC0gUHJlZml4OiAke3BhZGRlZFByZWZpeH0gTGVuZ3RoOiAke2xlbmd0aH0gYnl0ZXNgO1xuICAgIH0pXG4gICAgICAgIC5qb2luKCdcXG4nKTtcbn1cbmZ1bmN0aW9uIGtleUVycm9yKHsga2V5LCB0eXBlLCBwcmVmaXgsIGxlbiwgfSkge1xuICAgIGNvbnN0IHZhbGlkRm9ybWF0cyA9IGdldFZhbGlkRm9ybWF0c1RhYmxlKHR5cGUpO1xuICAgIHJldHVybiBgaW52YWxpZF9rZXk6XG5cblR5cGU6ICR7dHlwZX1cbktleTogJHtrZXl9XG5QcmVmaXg6ICR7cHJlZml4UmVwcihwcmVmaXgpfSBcbkxlbmd0aDogJHtsZW59IGJ5dGVzXG5cbkFjY2VwdGFibGUgJHt0eXBlfSBmb3JtYXRzIGFyZTpcbiR7dmFsaWRGb3JtYXRzfVxuYDtcbn1cbi8qKlxuICogRGV0ZXJtaW5lcyB0aGUgYWxnb3JpdGhtIGFzc29jaWF0ZWQgd2l0aCBhIGdpdmVuIGtleSAocHVibGljL3ByaXZhdGUpLlxuICpcbiAqIEBwYXJhbSBrZXkgLSBoZXhhZGVjaW1hbCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGtleS5cbiAqIEBwYXJhbSB0eXBlIC0gd2hldGhlciBleHBlY3RlZCBrZXkgaXMgcHVibGljIG9yIHByaXZhdGVcbiAqIEByZXR1cm5zIEFsZ29yaXRobSBhbGdvcml0aG0gZm9yIHNpZ25pbmcvdmVyaWZ5aW5nXG4gKiBAdGhyb3dzIEVycm9yIHdoZW4ga2V5IGlzIGludmFsaWRcbiAqL1xuZnVuY3Rpb24gZ2V0QWxnb3JpdGhtRnJvbUtleShrZXksIHR5cGUpIHtcbiAgICBjb25zdCB7IHByZWZpeCwgbGVuIH0gPSBnZXRLZXlJbmZvKGtleSk7XG4gICAgLy8gU3BlY2lhbCBjYXNlIGJhY2sgY29tcGF0IHN1cHBvcnQgZm9yIG5vIHByZWZpeFxuICAgIGNvbnN0IHVzZWRQcmVmaXggPSB0eXBlID09PSAncHJpdmF0ZScgJiYgbGVuID09PSAzMiA/IFByZWZpeC5OT05FIDogcHJlZml4O1xuICAgIGNvbnN0IGFsZ29yaXRobSA9IEtFWV9UWVBFU1tgJHt0eXBlfV8ke3VzZWRQcmVmaXh9XyR7bGVufWBdO1xuICAgIGlmICghYWxnb3JpdGhtKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihrZXlFcnJvcih7IGtleSwgdHlwZSwgbGVuLCBwcmVmaXg6IHVzZWRQcmVmaXggfSkpO1xuICAgIH1cbiAgICByZXR1cm4gYWxnb3JpdGhtO1xufVxuZXhwb3J0cy5nZXRBbGdvcml0aG1Gcm9tS2V5ID0gZ2V0QWxnb3JpdGhtRnJvbUtleTtcbmZ1bmN0aW9uIGdldEFsZ29yaXRobUZyb21QdWJsaWNLZXkoa2V5KSB7XG4gICAgcmV0dXJuIGdldEFsZ29yaXRobUZyb21LZXkoa2V5LCAncHVibGljJyk7XG59XG5leHBvcnRzLmdldEFsZ29yaXRobUZyb21QdWJsaWNLZXkgPSBnZXRBbGdvcml0aG1Gcm9tUHVibGljS2V5O1xuZnVuY3Rpb24gZ2V0QWxnb3JpdGhtRnJvbVByaXZhdGVLZXkoa2V5KSB7XG4gICAgcmV0dXJuIGdldEFsZ29yaXRobUZyb21LZXkoa2V5LCAncHJpdmF0ZScpO1xufVxuZXhwb3J0cy5nZXRBbGdvcml0aG1Gcm9tUHJpdmF0ZUtleSA9IGdldEFsZ29yaXRobUZyb21Qcml2YXRlS2V5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0QWxnb3JpdGhtRnJvbUtleS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xrpl-secret-numbers/node_modules/ripple-keypairs/dist/utils/getAlgorithmFromKey.js\n");

/***/ })

};
;